<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on xujiajiadexiaokeai</title><link>https://xujiajiadexiaokeai.github.io/tags/go/</link><description>Recent content in Go on xujiajiadexiaokeai</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© 2021-2023 xujiajiadexiaokeai</copyright><lastBuildDate>Mon, 10 Apr 2023 14:25:30 +0800</lastBuildDate><atom:link href="https://xujiajiadexiaokeai.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>[NOTE] Go Profiling and Observability from Scratch</title><link>https://xujiajiadexiaokeai.github.io/2023-04-10/go-profiling-and-observability-from-scratch/</link><pubDate>Mon, 10 Apr 2023 14:25:30 +0800</pubDate><guid>https://xujiajiadexiaokeai.github.io/2023-04-10/go-profiling-and-observability-from-scratch/</guid><description>[NOTE] Go Profiling and Observability from Scratch Agenda Scheduling &amp;amp; Memory Management: A simple model Profiling: CPU, Memory, Mutex, Block, Goroutine + Overhead Benchmarks Tracing: Manually, Distributed, Runtime Metrics: Runtime Metrics 3rd party Tools: Linux perf, BPF, Delve,fgprof Scheduling &amp;amp; Memory Management Go&amp;rsquo;s primary job is to multiplex and abstract hardware resources Very similar to an operating system, - it&amp;rsquo;s turtles all the way down Following model recap for some, but perhaps more useful than more complex models usually presented.</description><content>&lt;h1 id="note-go-profiling-and-observability-from-scratch">[NOTE] Go Profiling and Observability from Scratch&lt;/h1>
&lt;h2 id="agenda">Agenda&lt;/h2>
&lt;ul>
&lt;li>Scheduling &amp;amp; Memory Management: A simple model&lt;/li>
&lt;li>Profiling: CPU, Memory, Mutex, Block, Goroutine + Overhead Benchmarks&lt;/li>
&lt;li>Tracing: Manually, Distributed, Runtime&lt;/li>
&lt;li>Metrics: Runtime Metrics&lt;/li>
&lt;li>3rd party Tools: Linux perf, BPF, Delve,fgprof&lt;/li>
&lt;/ul>
&lt;h2 id="scheduling--memory-management">Scheduling &amp;amp; Memory Management&lt;/h2>
&lt;ul>
&lt;li>Go&amp;rsquo;s primary job is to multiplex and abstract hardware resources&lt;/li>
&lt;li>Very similar to an operating system, - it&amp;rsquo;s turtles all the way down&lt;/li>
&lt;li>Following model recap for some, but perhaps more useful than more complex models usually presented.&lt;/li>
&lt;/ul>
&lt;h3 id="scheduling">Scheduling&lt;/h3>
&lt;ul>
&lt;li>Go schedules goroutines onto CPUs (OS Threads)&lt;/li>
&lt;li>Deeply integrated with networking, channels and mutexes&lt;/li>
&lt;li>Scalable to hundred of thousands of goroutines&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../../img/image-20230410152956115.png" alt="image-20230410152956115">&lt;/p>
&lt;h3 id="memory-management">Memory Management&lt;/h3>
&lt;ul>
&lt;li>Small stack per goroutine (4kB+)&lt;/li>
&lt;li>Big heap, needed for shared data and other reasons&lt;/li>
&lt;li>Stack allocation is very cheap&lt;/li>
&lt;li>Heap allocation and GC is expensive (20%+ CPU Time common)&lt;/li>
&lt;li>Reduce: Turn heap into stack allocs or avoid completely&lt;/li>
&lt;li>Reuse: Reuse heap allocations like structs and buffers&lt;/li>
&lt;li>Recycle: Some GC work is inevitable, it&amp;rsquo;s okay&lt;/li>
&lt;li>Reducing heap allocs speed up unrelated code (GC thrashes CPU Caches)&lt;/li>
&lt;/ul>
&lt;h3 id="memory-management-heap">Memory Management: Heap&lt;/h3>
&lt;ul>
&lt;li>Referenced Allocation (In-Use)&lt;/li>
&lt;li>Unreferenced Allocation (Garbage)&lt;/li>
&lt;/ul>
&lt;h2 id="profiling">Profiling&lt;/h2>
&lt;h3 id="cpu-profiler">CPU Profiler&lt;/h3>
&lt;ul>
&lt;li>Captures: On-CPU time of your code by interrupting the process after every 10ms of CPU Time to take a stack trace.&lt;/li>
&lt;li>Profile Data: Sample count and time spent per stack trace&lt;/li>
&lt;li>Sample Rate: runtime.SetCPUProfileRate(hz)&lt;/li>
&lt;/ul>
&lt;h3 id="cpu-profiler-sigprof-for-every-10ms-of-cpu-time">CPU Profiler: SIGPROF for every 10ms of CPU Time&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// go 1.17.3 src/runtime/signal_unix.go
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">setProcessCPUPROFILER&lt;/span>(&lt;span style="color:#a6e22e">hz&lt;/span> &lt;span style="color:#66d9ef">int32&lt;/span>) {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">hz&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#75715e">// Enable the Go signal handler if not enabled.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">atomic&lt;/span>.&lt;span style="color:#a6e22e">Cas&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">handlingSig&lt;/span>[&lt;span style="color:#a6e22e">_SIGPROF&lt;/span>], &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>) {
&lt;span style="color:#a6e22e">atomic&lt;/span>.&lt;span style="color:#a6e22e">Storeuintptr&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">fwdSig&lt;/span>[&lt;span style="color:#a6e22e">_SIGPROF&lt;/span>], &lt;span style="color:#a6e22e">getsig&lt;/span>(&lt;span style="color:#a6e22e">_SIGPROF&lt;/span>))
&lt;span style="color:#a6e22e">setsig&lt;/span>(&lt;span style="color:#a6e22e">_SIGPROF&lt;/span>, &lt;span style="color:#a6e22e">funcPC&lt;/span>(&lt;span style="color:#a6e22e">sighandler&lt;/span>))
}
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">it&lt;/span> &lt;span style="color:#a6e22e">itimerval&lt;/span>
&lt;span style="color:#a6e22e">it&lt;/span>.&lt;span style="color:#a6e22e">it_interval&lt;/span>.&lt;span style="color:#a6e22e">tv_sec&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#a6e22e">it&lt;/span>.&lt;span style="color:#a6e22e">it_interval&lt;/span>.&lt;span style="color:#a6e22e">set_usec&lt;/span>(&lt;span style="color:#ae81ff">1000000&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#a6e22e">hz&lt;/span>)
&lt;span style="color:#a6e22e">it&lt;/span>.&lt;span style="color:#a6e22e">it_value&lt;/span> = &lt;span style="color:#a6e22e">it&lt;/span>.&lt;span style="color:#a6e22e">it_interval&lt;/span>
&lt;span style="color:#a6e22e">setitimer&lt;/span>(&lt;span style="color:#a6e22e">_ITIMER_PROF&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">it&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>)
} &lt;span style="color:#66d9ef">else&lt;/span> {&lt;span style="color:#f92672">...&lt;/span>}
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">sighandler&lt;/span>(&lt;span style="color:#a6e22e">sig&lt;/span> &lt;span style="color:#66d9ef">uint32&lt;/span>, &lt;span style="color:#a6e22e">info&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">siginfo&lt;/span>, &lt;span style="color:#a6e22e">ctxt&lt;/span> &lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>, &lt;span style="color:#a6e22e">gp&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">g&lt;/span>) {
&lt;span style="color:#a6e22e">_g_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">getg&lt;/span>()
&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">sigctxt&lt;/span>{&lt;span style="color:#a6e22e">info&lt;/span>, &lt;span style="color:#a6e22e">ctxt&lt;/span>}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">sig&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">_SIGPROF&lt;/span> {
&lt;span style="color:#a6e22e">sigprof&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">sigpc&lt;/span>(), &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">sigsp&lt;/span>(), &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">siglr&lt;/span>(), &lt;span style="color:#a6e22e">gp&lt;/span>, &lt;span style="color:#a6e22e">_g_&lt;/span>.&lt;span style="color:#a6e22e">m&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#75715e">// ...
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="cpu-profiler-add-stacktrace-to-profile">CPU Profiler: Add Stacktrace to Profile&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// go 1.17.3 src/runtime/proc.go
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">maxCPUProfStack&lt;/span> = &lt;span style="color:#ae81ff">64&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">sigprof&lt;/span>(&lt;span style="color:#a6e22e">pc&lt;/span>, &lt;span style="color:#a6e22e">sp&lt;/span>, &lt;span style="color:#a6e22e">lr&lt;/span> &lt;span style="color:#66d9ef">uintptr&lt;/span>, &lt;span style="color:#a6e22e">gp&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">g&lt;/span>, &lt;span style="color:#a6e22e">mp&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">m&lt;/span>) {
&lt;span style="color:#75715e">// ...
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">stk&lt;/span> [&lt;span style="color:#a6e22e">maxCPUProfStack&lt;/span>]&lt;span style="color:#66d9ef">uintptr&lt;/span>
&lt;span style="color:#75715e">// ...
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gentraceback&lt;/span>(&lt;span style="color:#a6e22e">pc&lt;/span>, &lt;span style="color:#a6e22e">sp&lt;/span>, &lt;span style="color:#a6e22e">lr&lt;/span>, &lt;span style="color:#a6e22e">gp&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">stk&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>], len(&lt;span style="color:#a6e22e">stk&lt;/span>), &lt;span style="color:#f92672">...&lt;/span>)
&lt;span style="color:#75715e">// ...
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">cpuprof&lt;/span>.&lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#a6e22e">gp&lt;/span>, &lt;span style="color:#a6e22e">stk&lt;/span>[:&lt;span style="color:#a6e22e">n&lt;/span>])
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="cpu-profiler-waiting-for-go-118">CPU Profiler: Waiting for Go 1.18&lt;/h3>
&lt;ul>
&lt;li>setitimer(2) fails to deliver more than 250 signals per second, biases profile to underestimate CPU Spikes, see GH #35057&lt;/li>
&lt;li>Go 1.18 patch from Rhys Hiltner will fix this and thread bias issues such as GH #14434 by using timer_create(2)&lt;/li>
&lt;/ul>
&lt;h3 id="block-profiler">Block Profiler&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Captures: Off-CPU time waiting on channels and mutexes&lt;/p>
&lt;/li>
&lt;li>
&lt;p>But not: Sleep, I/O, Syscalls, GC, etc.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Profile Data: Cumulative contentions and delays per stack trace&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">stack trace&lt;/th>
&lt;th style="text-align:center">contentions/count&lt;/th>
&lt;th style="text-align:center">delay/nanoseconds&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">main; foo;runtime.chansend1&lt;/td>
&lt;td style="text-align:center">22820&lt;/td>
&lt;td style="text-align:center">867549417&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">main; foo;bar;tuntime.chanrecv1&lt;/td>
&lt;td style="text-align:center">22748&lt;/td>
&lt;td style="text-align:center">453510869&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">main;foobar;sync.(*Mutex).Lock&lt;/td>
&lt;td style="text-align:center">795&lt;/td>
&lt;td style="text-align:center">5351086&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>Sample Rate: runtime.SetBlockProfileRate(rate)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="mutex-profiler">Mutex Profiler&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Captures: Off-CPU time waiting on mutexes (not channels)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Profile data: Cumulative contentions and delays per stack trace&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">stack trace&lt;/th>
&lt;th style="text-align:center">contentions/count&lt;/th>
&lt;th style="text-align:center">delay/nanoseconds&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">main; foo; sync.(*Mutex).Unlock&lt;/td>
&lt;td style="text-align:center">22820&lt;/td>
&lt;td style="text-align:center">867549417&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">main; foo;bar;sync.(*Mutex).Unlock&lt;/td>
&lt;td style="text-align:center">22748&lt;/td>
&lt;td style="text-align:center">453510869&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">main;foobar;sync.(*Mutex).Unlock&lt;/td>
&lt;td style="text-align:center">795&lt;/td>
&lt;td style="text-align:center">5351086&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>Rate: runtime.SetMutexProfileFraction(rate)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="block-vs-mutex">Block vs Mutex&lt;/h3>
&lt;ul>
&lt;li>Block seems like a superset of mutex profile, but it&amp;rsquo;s not:&lt;/li>
&lt;li>&lt;strong>Mutex profile&lt;/strong> shows what code is &lt;strong>doing the blocking&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Block profile&lt;/strong> show what code is &lt;strong>getting blocked&lt;/strong>&lt;/li>
&lt;li>Both perspectives are useful, so enable both profilers&lt;/li>
&lt;/ul>
&lt;h3 id="quick-note-on-time">Quick Note on Time&lt;/h3>
&lt;p>&lt;img src="../../img/image-20230410194639932.png" alt="image-20230410194639932">&lt;/p>
&lt;p>On-CPU Time &amp;gt; Real Time&lt;/p>
&lt;p>&lt;img src="../../img/image-20230410194928468.png" alt="image-20230410194928468">&lt;/p>
&lt;ul>
&lt;li>Goroutine Time: Cumulative (end - start) time of all goroutines&lt;/li>
&lt;li>CPU Time: CPU tiem circle can be larger than Real time circle&lt;/li>
&lt;li>Mutex Time&lt;/li>
&lt;li>Block Time: Block time is a superset of mutex time (but with different call stacks)&lt;/li>
&lt;li>Untracked Off-CPU Waiting Time: Profiling Blindspot!&lt;/li>
&lt;/ul>
&lt;h3 id="memory-profiling">Memory Profiling&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Profile Data: Cumulative allocs and inuse per stack trace&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>stack trace&lt;/th>
&lt;th>alloc_objects/count&lt;/th>
&lt;th>alloc_space/bytes&lt;/th>
&lt;th>inuse_objects/count&lt;/th>
&lt;th>inuse_space/bytes&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>main; foo&lt;/td>
&lt;td>5&lt;/td>
&lt;td>120&lt;/td>
&lt;td>2&lt;/td>
&lt;td>48&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>main;foo;bar&lt;/td>
&lt;td>3&lt;/td>
&lt;td>768&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>main;foobar&lt;/td>
&lt;td>4&lt;/td>
&lt;td>512&lt;/td>
&lt;td>1&lt;/td>
&lt;td>128&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>Samples captured every 512kB of malloc() and when those objects are free()&amp;rsquo;d by the GC later on (inuse = allocs - frees)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Sample Rate: runtime.memProfileRate = rate (default = 512kB)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">user&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">User&lt;/span>{&lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;alice&amp;#34;&lt;/span>}
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;User: %v\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">user&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly">LEAQ type.&amp;quot;&amp;quot;.User(SB), AX
PCDATA $1, $0
NOP
CALL runtime.newobject(SB)
MOVQ $5, 8(AX)
LEAQ go.string.&amp;quot;alice&amp;quot;(SB), CX
MOVQ CX, (AX)
&lt;/code>&lt;/pre>&lt;h3 id="goroutine-profiling">Goroutine Profiling&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Profile Data: Goroutine count per stack trace&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>stack trace&lt;/th>
&lt;th>goroutine/count&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>main;foo&lt;/td>
&lt;td>5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>main; foo;bar&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>main;foobar&lt;/td>
&lt;td>4&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>O(N) &lt;strong>Stop-The-World&lt;/strong> where N is the total number of goroutines (cause tail latency)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>No Sampling Mechanism&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Use Cases&lt;/strong>: Detect goroutine leaks and diagnose hanging programs(debug=2)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="tracing">Tracing&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Tracing&lt;/strong>: Recording of time-stamped events&lt;/p>
&lt;p>Distinction with logging can be muddy, depends on context&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Distributed Tracing&lt;/strong>: Tracing requests through multiple services&lt;/p>
&lt;p>Highly recommended to understand performance from system perspective&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Runtime Tracing&lt;/strong>: Go&amp;rsquo;s built-in tracer&lt;/p>
&lt;p>Can shine a light on profiling blindspots (e.g. I/O, Sleep, GC, Scheduler Backlog)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Tracing Profiler&lt;/strong>: Tracing every function call&lt;/p>
&lt;p>Doesn&amp;rsquo;t currently exist for Go&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="runtime-tracer">Runtime Tracer&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Traces Scheduler, GC, Contentions, Syscall, etc.&lt;/p>
&lt;p>see src/runtime/trace.go for a list of events&lt;/p>
&lt;/li>
&lt;li>
&lt;p>High-overhead firehose that produces a lot of data&lt;/p>
&lt;/li>
&lt;li>
&lt;p>But fantastic way to track down latency when nothing else seems to have the answer&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="profiling-and-tracing-overhead-analysis">Profiling and Tracing Overhead Analysis&lt;/h3>
&lt;ul>
&lt;li>Run different workloads in a loop for 1 minute with and without various profilers enabled, measure avg latency&lt;/li>
&lt;li>Repeat each experiment 5 times&lt;/li>
&lt;li>Performed on a AWS c5.4xlarge machine(6h total duration)&lt;/li>
&lt;li>This is hard! Early sneak peek, bad env, bad stats, naive workloads, do not trst too much!&lt;/li>
&lt;/ul>
&lt;h3 id="overhead-analysis-error-sources">Overhead Analysis: Error Sources&lt;/h3>
&lt;ul>
&lt;li>Dynamic frequency scaling (Turbo Boost)&lt;/li>
&lt;li>Noisy Nerghbors&lt;/li>
&lt;li>Human error&lt;/li>
&lt;li>Check for new results by the time you watch this&lt;/li>
&lt;li>But: Very low overhead for cpu, memory, mutex and block profiler for non-pathological workloads&lt;/li>
&lt;/ul>
&lt;h2 id="metrics">Metrics&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Use runtime/metrics (Go 1.16+), highlights: (*mB ~ 100mB)&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>metric&lt;/th>
&lt;th>description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>/gc/pauses:seconds&lt;/strong>&lt;/td>
&lt;td>Stop-the-world pause latency histogram&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>/sched/latencies:seconds&lt;/strong>&lt;/td>
&lt;td>Goroutines waiting in runnable state latency histogram&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/sched/goroutines:goroutines&lt;/td>
&lt;td>Number of live goroutines&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/memory/classes/heap/objects:bytes&lt;/td>
&lt;td>Current heap memory usage&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/memory/classes/heap/stacksbytes&lt;/td>
&lt;td>Current stack memory usage&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>/memory/classes/profiling/buckets:bytes&lt;/strong>&lt;/td>
&lt;td>Memory used by internal profiling hash maps&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;p>Recommendation: Capture all runtime/metrics&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="3rd-party-tools">3rd Party Tools&lt;/h2>
&lt;ul>
&lt;li>Linux Perf&lt;/li>
&lt;li>bpftrace&lt;/li>
&lt;li>delve&lt;/li>
&lt;li>fgprof&lt;/li>
&lt;/ul>
&lt;h2 id="scheduling--execution-observability">Scheduling / Execution Observability&lt;/h2>
&lt;ul>
&lt;li>Profilers: CPU, Block, Mutex, Goroutine&lt;/li>
&lt;li>Tracing: Runtime Execution Tracer, Distributed Tracing&lt;/li>
&lt;li>Metrics: Scheduler Latency, Goroutine Count&lt;/li>
&lt;li>Compile Time: Function Inlining (go build -gcflags='-m')&lt;/li>
&lt;/ul>
&lt;h2 id="memory-management-observability">Memory Management Observability&lt;/h2>
&lt;ul>
&lt;li>Profilers: Memory Profiler&lt;/li>
&lt;li>Tracing: Runtime Tracing (GC Events)&lt;/li>
&lt;li>Metrics: GC counters, GC pause times, Heap Stats, Stack Stats&lt;/li>
&lt;li>Compile Time: Escape Analysis (go build -gcflags='-m')&lt;/li>
&lt;/ul>
&lt;h2 id="recap">Recap&lt;/h2>
&lt;ul>
&lt;li>Go runtime offers great observability out of the box&lt;/li>
&lt;li>Most tools play nice with production workloads&lt;/li>
&lt;li>3rd party tools and custom instrumentation can close the gaps&lt;/li>
&lt;/ul>
&lt;h2 id="source">Source&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=7hg4T2Qqowk">GopherCon 2021: Felix GeisendÃ¶rfer - Go Profiling and Observability from Scratch&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>[NOTE] Building a Go profiler using Go</title><link>https://xujiajiadexiaokeai.github.io/2023-04-10/building-a-go-profiler-using-go/</link><pubDate>Mon, 10 Apr 2023 09:35:30 +0800</pubDate><guid>https://xujiajiadexiaokeai.github.io/2023-04-10/building-a-go-profiler-using-go/</guid><description>[NOTE] Building a Go profiler using Go What is profilling A form of dynamic program analysis that measures resource consumption
For example:
the space (memory) time complexity of a program (CPU) usage of instructions frequency and duration of function calls Why use profiling Profiling is about how do we know:
What&amp;rsquo;s worth optimizing? What needs optimization? How to profiling Tracing Recording each and every event constantly High costs Sampling Sample for a certain duration Eg.</description><content>&lt;h1 id="note-building-a-go-profiler-using-go">[NOTE] Building a Go profiler using Go&lt;/h1>
&lt;h2 id="what-is-profilling">What is profilling&lt;/h2>
&lt;p>A form of dynamic program analysis that &lt;strong>measures&lt;/strong> resource consumption&lt;/p>
&lt;p>For example:&lt;/p>
&lt;ul>
&lt;li>the &lt;strong>space&lt;/strong> (memory)&lt;/li>
&lt;li>&lt;strong>time complexity&lt;/strong> of a program (CPU)&lt;/li>
&lt;li>&lt;strong>usage of instructions&lt;/strong>&lt;/li>
&lt;li>&lt;strong>frequency&lt;/strong> and &lt;strong>duration&lt;/strong> of function calls&lt;/li>
&lt;/ul>
&lt;h2 id="why-use-profiling">Why use profiling&lt;/h2>
&lt;p>Profiling is about how do we know:&lt;/p>
&lt;ul>
&lt;li>What&amp;rsquo;s worth optimizing?&lt;/li>
&lt;li>What needs optimization?&lt;/li>
&lt;/ul>
&lt;h2 id="how-to-profiling">How to profiling&lt;/h2>
&lt;ul>
&lt;li>Tracing
&lt;ul>
&lt;li>Recording each and every event constantly&lt;/li>
&lt;li>High costs&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Sampling
&lt;ul>
&lt;li>Sample for a certain duration
&lt;ul>
&lt;li>Eg. 10 seconds&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Periodically observe function call stack
&lt;ul>
&lt;li>Eg. 100x per second&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Low overhead
&lt;ul>
&lt;li>&amp;lt;0.5% CPU&lt;/li>
&lt;li>~4MB memory&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="tiny-profiler">Tiny Profiler&lt;/h2>
&lt;ul>
&lt;li>A proof-of-concept profiler&lt;/li>
&lt;li>Profile all Go processes on a machine&lt;/li>
&lt;li>Produce pprof formatted profiles every 10s&lt;/li>
&lt;/ul>
&lt;h2 id="continuous-profiling">Continuous Profiling&lt;/h2>
&lt;ul>
&lt;li>pprof creates profile samples&lt;/li>
&lt;li>We want to sample every so often&lt;/li>
&lt;li>Little overhead due to sampling&lt;/li>
&lt;li>We hope to get profiles right before OOMs&lt;/li>
&lt;li>Automatically collect profiles rather than by hand&lt;/li>
&lt;/ul>
&lt;h2 id="source">Source&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=OlHQ6gkwqyA">GopherCon Europe 2022: Kemal Akkoyun - Building a Go Profiler Using Go&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://static.googleusercontent.com/media/research.google.com/zh-CN//pubs/archive/36575.pdf">Google-Wide Profiling: A Continuous Profiling Infrastructure For Data Centers&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>ä¸ºä»ä¹selectä»è½ä½ç¨äºç®¡é?</title><link>https://xujiajiadexiaokeai.github.io/2022-11-17/why-select-only-work-on-channel/</link><pubDate>Thu, 17 Nov 2022 19:15:45 +0800</pubDate><guid>https://xujiajiadexiaokeai.github.io/2022-11-17/why-select-only-work-on-channel/</guid><description>selectçç¹æ§ caseçæ§è¡ å·ä½æ§è¡é£ä¸ªcase,åå³äºå½æ°ä¼ å¥çç®¡é
ç®¡éæ²¡æç¼å²åº æç¼å²åºå¹¶ä¸è¿å¯ä»¥å¡æ°æ® æç¼å²åºä½ç¼å²åºå·²æ»¡ æç¼å²åºä¸å·²æé¨åæ°æ® è¿åå¼ å¯ä»¥å¨caseä¸­å£°æåéå¹¶èµå¼
default defaultä¸è½å¤çç®¡éè¯»å å½ææcaseè¢«é»å¡,æ§è¡default defaultæ¯ç¹æ®çcase
ä½¿ç¨æ¡ä¾ æ°¸ä¹é»å¡ ä½¿ç¨selecté»å¡mainå½æ°
func main() { server := webhooktesting.NewTestServer(nil) server.StartTLS() fmt.Println(&amp;#34;serving on&amp;#34;, server.URL) select {} // æ²¡æcaseådefault ,main()æ°¸ä¹é»å¡ } å¿«éæ£é å½ä½¿ç¨ç®¡éæ¥ä¼ è¾erroræ¶, å¯ä»¥ä½¿ç¨selectå¿«éæ£æ¥ç®¡éä¸­æ¯å¦æerror
errCh := make(chan error, active) jm.deleteJobPods(&amp;amp;job, activePods, errCh) // ä¼ å¥chanç¨äºè®°å½error select { case manageJobErr = &amp;lt;-errCh: if manageJobErr != nil { break } default: // æ²¡æerror, ç»æ } éæ¶ç­å¾ å½ä½¿ç¨ç®¡éç®¡çå½æ°ä¸ä¸ææ¶, å¯ä»¥ä½¿ç¨selectåå»ºå·ææ¶ææ§çç®¡é
func waitForStopOrTimeout(stopCh &amp;lt;-chan struct{}, timeout time.</description><content>&lt;h1 id="selectçç¹æ§">selectçç¹æ§&lt;/h1>
&lt;h2 id="caseçæ§è¡">caseçæ§è¡&lt;/h2>
&lt;p>å·ä½æ§è¡é£ä¸ªcase,åå³äºå½æ°ä¼ å¥çç®¡é&lt;/p>
&lt;ul>
&lt;li>ç®¡éæ²¡æç¼å²åº&lt;/li>
&lt;li>æç¼å²åºå¹¶ä¸è¿å¯ä»¥å¡æ°æ®&lt;/li>
&lt;li>æç¼å²åºä½ç¼å²åºå·²æ»¡&lt;/li>
&lt;li>æç¼å²åºä¸å·²æé¨åæ°æ®&lt;/li>
&lt;/ul>
&lt;h2 id="è¿åå¼">è¿åå¼&lt;/h2>
&lt;p>å¯ä»¥å¨caseä¸­å£°æåéå¹¶èµå¼&lt;/p>
&lt;h2 id="default">default&lt;/h2>
&lt;p>defaultä¸è½å¤çç®¡éè¯»å
å½ææcaseè¢«é»å¡,æ§è¡default
defaultæ¯ç¹æ®çcase&lt;/p>
&lt;h1 id="ä½¿ç¨æ¡ä¾">ä½¿ç¨æ¡ä¾&lt;/h1>
&lt;h2 id="æ°¸ä¹é»å¡">æ°¸ä¹é»å¡&lt;/h2>
&lt;p>ä½¿ç¨selecté»å¡mainå½æ°&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">server&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">webhooktesting&lt;/span>.&lt;span style="color:#a6e22e">NewTestServer&lt;/span>(&lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;span style="color:#a6e22e">server&lt;/span>.&lt;span style="color:#a6e22e">StartTLS&lt;/span>()
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;serving on&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">server&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>)
&lt;span style="color:#66d9ef">select&lt;/span> {} &lt;span style="color:#75715e">// æ²¡æcaseådefault ,main()æ°¸ä¹é»å¡
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="å¿«éæ£é">å¿«éæ£é&lt;/h2>
&lt;p>å½ä½¿ç¨ç®¡éæ¥ä¼ è¾erroræ¶, å¯ä»¥ä½¿ç¨selectå¿«éæ£æ¥ç®¡éä¸­æ¯å¦æerror&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">errCh&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>, &lt;span style="color:#a6e22e">active&lt;/span>)
&lt;span style="color:#a6e22e">jm&lt;/span>.&lt;span style="color:#a6e22e">deleteJobPods&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">job&lt;/span>, &lt;span style="color:#a6e22e">activePods&lt;/span>, &lt;span style="color:#a6e22e">errCh&lt;/span>) &lt;span style="color:#75715e">// ä¼ å¥chanç¨äºè®°å½error
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">select&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">manageJobErr&lt;/span> = &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">errCh&lt;/span>:
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">manageJobErr&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">break&lt;/span>
}
&lt;span style="color:#66d9ef">default&lt;/span>: &lt;span style="color:#75715e">// æ²¡æerror, ç»æ
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="éæ¶ç­å¾">éæ¶ç­å¾&lt;/h2>
&lt;p>å½ä½¿ç¨ç®¡éç®¡çå½æ°ä¸ä¸ææ¶, å¯ä»¥ä½¿ç¨selectåå»ºå·ææ¶ææ§çç®¡é&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">waitForStopOrTimeout&lt;/span>(&lt;span style="color:#a6e22e">stopCh&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}, &lt;span style="color:#a6e22e">timeout&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>) &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{} {
&lt;span style="color:#a6e22e">stopChWithTimeout&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{})
&lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;span style="color:#66d9ef">select&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">stopCh&lt;/span>:
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">After&lt;/span>(&lt;span style="color:#a6e22e">timeout&lt;/span>): &lt;span style="color:#75715e">// ç®¡éä¼å¨æå®æ¶é´åå³é­
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
close(&lt;span style="color:#a6e22e">stopChWithTimeout&lt;/span>)
}()
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">stopChWithTimeout&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="å®ç°åç">å®ç°åç&lt;/h1>
&lt;ul>
&lt;li>ä¸ºä»ä¹æ¯ä¸ªcaseè¯­å¥åªè½å¤çä¸ä¸ªç®¡é?&lt;/li>
&lt;li>ä¸ºä»ä¹caseè¯­å¥æ§è¡é¡ºåºéæº(å¤ä¸ªcaseé½å°±ç»ªçæåµä¸)?&lt;/li>
&lt;li>ä¸ºä»ä¹caseè¯­å¥åå¼ä¸ºnilçç®¡éä¸­åæ°æ®ä¸ä¼è§¦åpanic?&lt;/li>
&lt;/ul>
&lt;h2 id="æ°æ®ç»æ">æ°æ®ç»æ&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">scase&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">hchan&lt;/span> &lt;span style="color:#75715e">// æä½çç®¡é
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">kind&lt;/span> &lt;span style="color:#a6e22e">unit16&lt;/span> &lt;span style="color:#75715e">// caseç±»å
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">elem&lt;/span> &lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span> &lt;span style="color:#75715e">// æåæ°æ®å­æ¾ä½ç½®çæé
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">...&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>ç®¡é
å ä¸ºæ¯ä¸ªscaseä¸­åªæä¸ä¸ªç®¡é, è¿å³å®äºä¸ä¸ªcaseåªè½å¤çä¸ä¸ªç®¡é
ç¼è¯å¨å¨å¤çcaseè¯­å¥æ¶,å¦æcaseè¯­å¥ä¸­æ²¡æç®¡éæä½(ä¸è½å¤çæscaseå¯¹è±¡),åä¼ç»åºç¼è¯éè¯¯:&lt;/li>
&lt;/ol>
&lt;pre tabindex="0">&lt;code>select case must be receive, send or assign recv
&lt;/code>&lt;/pre>&lt;ol start="2">
&lt;li>ç±»å&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">const&lt;/span> (
&lt;span style="color:#a6e22e">caseNil&lt;/span> = &lt;span style="color:#66d9ef">iota&lt;/span>
&lt;span style="color:#a6e22e">caseRecv&lt;/span>
&lt;span style="color:#a6e22e">caseSend&lt;/span>
&lt;span style="color:#a6e22e">caseDefault&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>caseNil: è¡¨ç¤ºå¶æä½çç®¡éå¼ä¸ºnil, ç±äºnilç®¡éæ¢ä¸å¯è¯»,ä¹ä¸å¯å,æä»¥æ°¸è¿ä¸ä¼å½ä¸­
æä»¥å¨caseè¯­å¥ä¸­åå¼ä¸ºnilçç®¡éä¸­åæ°æ®ä¸ä¼è§¦åpanicçåå &lt;/li>
&lt;li>caseRecv: ä»ç®¡éä¸­è¯»æ°æ®&lt;/li>
&lt;li>caseSend: åç®¡éä¸­åæ°æ®&lt;/li>
&lt;li>caseDeafult: ä¸ä¼æä½ç®¡é,æ¯ä¸ªselectä¸­ä»å¯å­å¨ä¸ä¸ª, å¯åºç°å¨ä»»æä½ç½®&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>æ°æ®
scase.elemè¡¨ç¤ºæ°æ®å­æ¾çå°å&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>caseRecv: è¯»åºçæ°æ®å­æ¾çå°å&lt;/li>
&lt;li>caseSend: å°åå¥ç®¡éçæ°æ®å­æ¾çå°å&lt;/li>
&lt;/ul>
&lt;h2 id="å®ç°é»è¾">å®ç°é»è¾&lt;/h2>
&lt;p>&lt;code>selectgo()&lt;/code> ç¨äºå¤çselectè¯­å¥&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">selectgo&lt;/span>(&lt;span style="color:#a6e22e">cas0&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">scase&lt;/span>, &lt;span style="color:#a6e22e">order0&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">uint16&lt;/span>, &lt;span style="color:#a6e22e">ncases&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) (&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#66d9ef">bool&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>selectgo()&lt;/code>å½æ°ä¼ä»ä¸ç»caseä¸­æéä¸ä¸ªcase,å¹¶è¿åå½ä¸­caseçä¸æ ,å¯¹äºcaseRecvçcase,è¿ä¼è¿åæ¯å¦è¯»åæå
å½ææcaseé½ä¸å¯è½å°±ç»ªæ¶,selectgo()é·å¥æ°¸ä¹é»å¡,æ­¤æ¶å½æ°ä¸ä¼è¿å&lt;/p>
&lt;h3 id="cas0">cas0&lt;/h3>
&lt;p>ç¼è¯å¨ä¼å°selectä¸­çcaseè¯­å¥å­å¨å¨ä¸ä¸ªæ°ç»ä¸­,cas0ä¿å­è¿ä¸ªæ°ç»çå°å&lt;/p>
&lt;h3 id="ncases">ncases&lt;/h3>
&lt;p>ncasesè¡¨ç¤ºcaseçä¸ªæ°(åæ´»default),å³cas0æ°ç»çé¿åº¦&lt;/p>
&lt;h3 id="order0">order0&lt;/h3>
&lt;p>order0 ä¸ºä¸ä¸ªæ´åæ°ç»çå°å,å¶é¿åº¦ä¸ºcaseæ ¼å¼ç2å.
order0æ°ç»æ¯&lt;strong>caseæ§è¡éæºæ§çå³é®&lt;/strong>&lt;/p>
&lt;p>order0æ°ç»è¢«ä¸åä¸ºäº
ååé¨åå­æ¾caseçéæºé¡ºåº(pollorder),selectgo()ä¼å°åå§çcaseé¡ºåºæä¹±,è¿æ ·å¨æ£æ¥æ¯ä¸ªcaseæ¯å¦å°±ç»ªæ¶å°±ä¼è¡¨ç°åºéæºæ§
ååé¨åå­æ¾ç®¡éå éçé¡ºåº(lockorder),selectgo()ä¼æç§ç®¡éå°åé¡ºåºå¯¹å¤ä¸ªç®¡éå é,ä»èé¿åå éå¤å éå¼åçæ­»éé®é¢&lt;/p>
&lt;h2 id="å®ç°">å®ç°&lt;/h2>
&lt;p>selectgo()å½æ°çå®ç°åæ¬ä»¥ä¸è¦ç¹:&lt;/p>
&lt;ul>
&lt;li>éè¿éæºå½æ°fastrandn()å°åå§çcaseé¡ºåºæä¹±,å¨éååä¸ªcaseæ¶ä½¿ç¨æä¹±åçé¡ºåºå°±ä¼è¡¨ç°åºéæºæ§&lt;/li>
&lt;li>å¾ªç¯éååä¸ªcaseæ¶,å¦æåç°æä¸ªcaseå°±ç»ª,åç´æ¥è·³åºå¾ªç¯æä½ç®¡éå¹¶è¿å&lt;/li>
&lt;li>å¾ªç¯éååä¸ªcaseæ¶,å¦æå¾ªç¯æ­£å¸¸ç»æ,è¯´æææcaseé½æ²¡æå°±ç»ª,ædefaultç´æ¥è·³default&lt;/li>
&lt;li>å¦æé½æ²¡æå°±ç»ªä¸æ²¡ædefault,selectgo()å°é»å¡ç­å¾ææç®¡é,ä»»ä¸ç®¡éå°±ç»ªå,é½å°å¼å§æ°çå¾ªç¯&lt;/li>
&lt;/ul>
&lt;h1 id="å°ç»">å°ç»&lt;/h1>
&lt;ul>
&lt;li>selectä»è½æä½ç®¡é&lt;/li>
&lt;li>æ¯ä¸ªcaseä»è½å¤çä¸ä¸ªç®¡é,è¦ä¹è¯»è¦ä¹å&lt;/li>
&lt;li>å¤ä¸ªcaseè¯­å¥çæ§è¡é¡ºåºæ¯éæºç&lt;/li>
&lt;li>å­å¨default,åselectä¸ä¼é»å¡&lt;/li>
&lt;/ul></content></item><item><title>Go Generic</title><link>https://xujiajiadexiaokeai.github.io/2022-10-01/go-goroutine/</link><pubDate>Sat, 01 Oct 2022 15:16:17 +0800</pubDate><guid>https://xujiajiadexiaokeai.github.io/2022-10-01/go-goroutine/</guid><description>ä»ä¹æ¯æ³å ç±»åç³»ç» ç±»ååå­å¸å± ç±»åæ£æ¥ å¼ºç±»åãå¼±ç±»å éææ£æ¥ãå¨ææ£æ¥ éææ£æ¥: ç¼è¯é¶æ®µ å¨ææ£æ¥: è¿è¡æ¶é¶æ®µ Goçç±»åæ£æ¥åçå¨ç¼è¯é¶æ®µ
ç±»åæ¨å¯¼ ç¼è¯å¨æ¥åç±»åæ¨å¯¼
éæ³åçªç ´ç±»åçéå¶ æå·¥å¤å¶ ä»£ç çæ genny
éè¦ä¸äºéæçææ®µå»ä½¿ç¨è¿äºåºï¼å¯è½è®©ä»£ç æå»ºåçæ´å¤æã å¢å äºç¼è¯æ¶é´ã å¢å äºäºè¿å¶åçä½ç§¯ã ç±»åæ­è¨ éè¿å°å½æ°ä¸­çåæ°ç±»åè½¬æ¢ä¸ºæ ¹ç±»å(interface{}),ç¶åå¯¹æ ¹ç±»åè¿è¡ææçç±»åæ­è¨
// source: https://github.com/danielfurman/presentations/blob/master/lets-go-generic/max.go package main import ( &amp;#34;errors&amp;#34; &amp;#34;fmt&amp;#34; ) func MaxNumber(s []interface{}) (interface{}, error) { // HL if len(s) == 0 { return nil, errors.New(&amp;#34;no values given&amp;#34;) } switch first := s[0].(type) { // HL case int: // HL max := first for _, rawV := range s[1:] { v := rawV.</description><content>&lt;h1 id="ä»ä¹æ¯æ³å">ä»ä¹æ¯æ³å&lt;/h1>
&lt;h1 id="ç±»åç³»ç»">ç±»åç³»ç»&lt;/h1>
&lt;h2 id="ç±»ååå­å¸å±">ç±»ååå­å¸å±&lt;/h2>
&lt;h2 id="ç±»åæ£æ¥">ç±»åæ£æ¥&lt;/h2>
&lt;ul>
&lt;li>å¼ºç±»åãå¼±ç±»å&lt;/li>
&lt;li>éææ£æ¥ãå¨ææ£æ¥&lt;/li>
&lt;/ul>
&lt;p>éææ£æ¥: ç¼è¯é¶æ®µ
å¨ææ£æ¥: è¿è¡æ¶é¶æ®µ
Goçç±»åæ£æ¥åçå¨ç¼è¯é¶æ®µ&lt;/p>
&lt;ul>
&lt;li>ç±»åæ¨å¯¼&lt;/li>
&lt;/ul>
&lt;p>ç¼è¯å¨æ¥åç±»åæ¨å¯¼&lt;/p>
&lt;h2 id="éæ³åçªç ´ç±»åçéå¶">éæ³åçªç ´ç±»åçéå¶&lt;/h2>
&lt;h3 id="æå·¥å¤å¶">æå·¥å¤å¶&lt;/h3>
&lt;h3 id="ä»£ç çæ">ä»£ç çæ&lt;/h3>
&lt;p>&lt;a href="https://github.com/cheekybits/genny">genny&lt;/a>&lt;/p>
&lt;ul>
&lt;li>éè¦ä¸äºéæçææ®µå»ä½¿ç¨è¿äºåºï¼å¯è½è®©ä»£ç æå»ºåçæ´å¤æã&lt;/li>
&lt;li>å¢å äºç¼è¯æ¶é´ã&lt;/li>
&lt;li>å¢å äºäºè¿å¶åçä½ç§¯ã&lt;/li>
&lt;/ul>
&lt;h3 id="ç±»åæ­è¨">ç±»åæ­è¨&lt;/h3>
&lt;p>éè¿å°å½æ°ä¸­çåæ°ç±»åè½¬æ¢ä¸ºæ ¹ç±»å(interface{}),ç¶åå¯¹æ ¹ç±»åè¿è¡ææçç±»åæ­è¨&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// source: https://github.com/danielfurman/presentations/blob/master/lets-go-generic/max.go
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;errors&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">MaxNumber&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> []&lt;span style="color:#66d9ef">interface&lt;/span>{}) (&lt;span style="color:#66d9ef">interface&lt;/span>{}, &lt;span style="color:#66d9ef">error&lt;/span>) { &lt;span style="color:#75715e">// HL
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">s&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;no values given&amp;#34;&lt;/span>)
}
&lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">first&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>].(&lt;span style="color:#66d9ef">type&lt;/span>) { &lt;span style="color:#75715e">// HL
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>: &lt;span style="color:#75715e">// HL
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">max&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">first&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">rawV&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>:] {
&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rawV&lt;/span>.(&lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#75715e">// HL
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">max&lt;/span> {
&lt;span style="color:#a6e22e">max&lt;/span> = &lt;span style="color:#a6e22e">v&lt;/span>
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">max&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#66d9ef">float64&lt;/span>: &lt;span style="color:#75715e">// HL
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">max&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">first&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">rawV&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>:] {
&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rawV&lt;/span>.(&lt;span style="color:#66d9ef">float64&lt;/span>) &lt;span style="color:#75715e">// HL
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">max&lt;/span> {
&lt;span style="color:#a6e22e">max&lt;/span> = &lt;span style="color:#a6e22e">v&lt;/span>
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">max&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;span style="color:#66d9ef">default&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;unsupported element type of given slice: %T&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">first&lt;/span>)
}
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">m1&lt;/span>, &lt;span style="color:#a6e22e">err1&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">MaxNumber&lt;/span>([]&lt;span style="color:#66d9ef">interface&lt;/span>{}{&lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#ae81ff">15&lt;/span>}) &lt;span style="color:#75715e">// HL
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">m2&lt;/span>, &lt;span style="color:#a6e22e">err2&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">MaxNumber&lt;/span>([]&lt;span style="color:#66d9ef">interface&lt;/span>{}{&lt;span style="color:#ae81ff">4.1&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">8.1&lt;/span>, &lt;span style="color:#ae81ff">15.1&lt;/span>}) &lt;span style="color:#75715e">// HL
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">err1&lt;/span>, &lt;span style="color:#a6e22e">err2&lt;/span>) &lt;span style="color:#75715e">// &amp;lt;nil&amp;gt; &amp;lt;nil&amp;gt;
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">m1&lt;/span>, &lt;span style="color:#a6e22e">m2&lt;/span>) &lt;span style="color:#75715e">// 15 15.1
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>è°ç¨æ¹éè¦å°åæ°åè£æè½¬æ¢ææ ¹ç±»åã&lt;/li>
&lt;li>å®ç°æ¹ä»£ç ä¸­è¦åäºå¤§éçç±»åæ­è¨ä»£ç ã&lt;/li>
&lt;li>å¤±å»äºç¼è¯å¨çç±»åå®å¨ä¿éã&lt;/li>
&lt;/ul>
&lt;h3 id="åå°">åå°&lt;/h3>
&lt;p>ç¨åå°çææ¯å¨è¿è¡æ¶è·åç±»åä¿¡æ¯,éè¿å¯¹ç±»åçæä¸¾å¤æ­æ¥å®ç°&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// source: https://github.com/danielfurman/presentations/blob/master/lets-go-generic/max.go
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;errors&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;reflect&amp;#34;&lt;/span>
)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">MaxNumber&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> []&lt;span style="color:#66d9ef">interface&lt;/span>{}) (&lt;span style="color:#66d9ef">interface&lt;/span>{}, &lt;span style="color:#66d9ef">error&lt;/span>) { &lt;span style="color:#75715e">// HL
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">s&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;no values given&amp;#34;&lt;/span>)
}
&lt;span style="color:#a6e22e">first&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">ValueOf&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>])
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">first&lt;/span>.&lt;span style="color:#a6e22e">CanInt&lt;/span>() {
&lt;span style="color:#a6e22e">max&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">first&lt;/span>.&lt;span style="color:#a6e22e">Int&lt;/span>()
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">ifV&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>:] {
&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">ValueOf&lt;/span>(&lt;span style="color:#a6e22e">ifV&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>.&lt;span style="color:#a6e22e">CanInt&lt;/span>() {
&lt;span style="color:#a6e22e">intV&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>.&lt;span style="color:#a6e22e">Int&lt;/span>()
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">intV&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">max&lt;/span> {
&lt;span style="color:#a6e22e">max&lt;/span> = &lt;span style="color:#a6e22e">intV&lt;/span>
}
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">max&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">first&lt;/span>.&lt;span style="color:#a6e22e">CanFloat&lt;/span>() {
&lt;span style="color:#a6e22e">max&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">first&lt;/span>.&lt;span style="color:#a6e22e">Float&lt;/span>()
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">ifV&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>[&lt;span style="color:#ae81ff">1&lt;/span>:] {
&lt;span style="color:#a6e22e">v&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">ValueOf&lt;/span>(&lt;span style="color:#a6e22e">ifV&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>.&lt;span style="color:#a6e22e">CanFloat&lt;/span>() {
&lt;span style="color:#a6e22e">intV&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>.&lt;span style="color:#a6e22e">Float&lt;/span>()
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">intV&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">max&lt;/span> {
&lt;span style="color:#a6e22e">max&lt;/span> = &lt;span style="color:#a6e22e">intV&lt;/span>
}
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">max&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;unsupported element type of given slice: %T&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>])
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">m1&lt;/span>, &lt;span style="color:#a6e22e">err1&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">MaxNumber&lt;/span>([]&lt;span style="color:#66d9ef">interface&lt;/span>{}{&lt;span style="color:#ae81ff">4&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#ae81ff">15&lt;/span>}) &lt;span style="color:#75715e">// HL
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">m2&lt;/span>, &lt;span style="color:#a6e22e">err2&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">MaxNumber&lt;/span>([]&lt;span style="color:#66d9ef">interface&lt;/span>{}{&lt;span style="color:#ae81ff">4.1&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">8.1&lt;/span>, &lt;span style="color:#ae81ff">15.1&lt;/span>}) &lt;span style="color:#75715e">// HL
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">err1&lt;/span>, &lt;span style="color:#a6e22e">err2&lt;/span>) &lt;span style="color:#75715e">// &amp;lt;nil&amp;gt; &amp;lt;nil&amp;gt;
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">m1&lt;/span>, &lt;span style="color:#a6e22e">m2&lt;/span>) &lt;span style="color:#75715e">// 15 15.1
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>å¯è¯»æ§å¯è½ä¸å¤ªå¥½ï¼å ä¸ºç¨å°äºå¤æçåå°ææ¯ã&lt;/li>
&lt;li>ä¼å¯¼è´è¿è¡æ¶æ§è½å·®ãè¿è¡æ¶åå°è¦æ¯ç´æ¥çä»£ç å¤äºå¾å¤æä»¤æä½ï¼æä»¥æ§è½è¦æ¢å¾å¤ã&lt;/li>
&lt;li>å¤±å»äºç¼è¯å¨çç±»åå®å¨ä¿éã&lt;/li>
&lt;/ul>
&lt;h3 id="æ¥å£">æ¥å£&lt;/h3>
&lt;p>SOLIDè®¾è®¡æ¨¡å¼ä¸­çä¾èµåç½®ååï¼Dependency Inversion Principleï¼è¦æ±è½¯ä»¶æ¥å£å¨è®¾è®¡ä¸­åºè¯¥ä¾èµæ½è±¡èä¸æ¯å·ä½ã&lt;/p>
&lt;ul>
&lt;li>å¯è½éè¦å®ä¹å¾å¤æ°æ®ç±»åã&lt;/li>
&lt;/ul>
&lt;h1 id="å®ç°æ³å">å®ç°æ³å&lt;/h1>
&lt;p>éå¸¸æä¹ä¸çæ³åä¹å«åæ°å¤æï¼æçæ¯å£°æä¸å®ä¹å½æ°ãå¤åç±»åãåéæ¶ä¸æå®å¶å·ä½çç±»åï¼èæè¿é¨åç±»åä½ä¸ºåæ°ä½¿ç¨ï¼ä½¿å¾è¯¥å®ä¹å¯¹åç§å·ä½ç±»åé½éç¨ãåæ°åå¤æä½¿å¾è¯­è¨æ´å·è¡¨è¾¾åï¼åæ¶ä¿æäºå®å¨çéæç±»åå®å¨ãè¿è¢«ç§°ä¸ºæ³åå½æ°ãæ³åæ°æ®ç±»åãæ³ååéï¼å½¢æäºæ³åç¼ç¨çåºç¡ã&lt;/p>
&lt;blockquote>
&lt;p>ç¼ç¨è¯­è¨çè®º(PLT)ä¸­å¤æ(Polymorphism)åå«ä¸ä¸ªä¸»è¦æ¹é¢ï¼ç¹è®¾å¤æ(Ad-hoc)ï¼åæ°å¤æ(Parametric)åå­ç±»å(Subtyping)ã&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Ad-hocï¼ä¹å«éè½½(Overloading)ï¼åè®¸å·æç¸ååç§°çå½æ°å¯¹ä¸åç±»åæ§è¡ä¸åçæä½ãä¾å¦ï¼+è¿ç®ç¬¦å³å¯ä»¥å°ä¸¤ä¸ªæ´æ°ç¸å ï¼ä¹å¯ä»¥è¿æ¥ä¸¤ä¸ªå­ç¬¦ä¸²ã&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Subtypingï¼ä¹å«åå®¹æ§å¤æ(Inclusion)ï¼æ¯æéè¿åºç±»æéåå¼ç¨ä½¿ç¨æ´¾çç±»çè½åã&lt;/p>
&lt;/blockquote>
&lt;p>å­ç±»åå¤æ(Subtyping)æ¯é¢åå¯¹è±¡ç¼ç¨(OOP)ä¸­å¾éè¦çä¸ä¸ªæ¦å¿µï¼å®ä¹ç§°ä¸ºè¿è¡æ¶å¤ææ§ï¼å ä¸ºç¼è¯å¨å¨ç¼è¯æ¶ä¸å®ä½å½æ°çå°åï¼èæ¯å¨è¿è¡æ¶å¨æè°ç¨å½æ°ãè¿ä¹ç§°ä¸ºå¨ææ´¾å(Dynamic Dispatch)ã&lt;/p>
&lt;p>æ´¾åç®çæ¯è®©ç¨åºè¿è¡æ¶ç¥éè¢«æ§è¡çå½æ°ææ¹æ³æå¨çåå­ä½ç½®ãæ´¾ååä¸ºï¼&lt;/p>
&lt;p>éææ´¾å(Static dispatch/early binding)ï¼å½ç¨åºå¨ç¼è¯æ¶å¯ä»¥æ¾å°æ§è¡çå½æ°ãC++é»è®¤ä½¿ç¨çæ¯ç´æ¥æ´¾åï¼å ä¸virtualä¿®é¥°ç¬¦å¯ä»¥æ¹æèå½æ°è¡¨(Vtable)æ´¾åãç´æ¥æ´¾åæ¯æå¿«çï¼åå æ¯è°ç¨æä»¤å°ï¼è¿å¯éè¿ç¼è¯å¨è¿è¡åèç­æ¹å¼çä¼åãè¿ç§æ´¾åç¼ºç¹æ¯ä¸çµæ´»ï¼æ æ³å®ç°ä¸äºé¢åå¯¹è±¡æéçææ¯å¦å¤ææ§ã
å¨ææ´¾å(dynamic dispatch/run-time dispatch/virtual method call/late binding)ï¼å½ç¨åºå¨è¿è¡æ¶å¯ä»¥æ¾å°æ§è¡çå½æ°ãJavaé»è®¤ä½¿ç¨çæ¯èå½æ°è¡¨(Vtable)æ´¾åï¼éè¿finalä¿®é¥°ç¬¦å¯æ¹æç´æ¥æ´¾åãèå½æ°è¡¨æ´¾åæ¯æå¨ææ§çï¼ä¸ä¸ªç±»éä¼ç¨è¡¨æ¥å­å¨ç±»æåå½æ°çæéï¼å­ç±»éå(Override)ç¶ç±»çå½æ°ä¼æ¿ä»£ç¶ç±»çå½æ°ï¼å­ç±»æ·»å çå½æ°ä¼è¢«å å°è¿ä¸ªè¡¨éãå½ç¨åºè¿è¡æ¶æ´¾åæ¶ä¼ä»è¿ä¸ªè¡¨ä¸­æ¾å°å¯¹åºçå½æ°ï¼è¿æ ·å°±å¯ä»¥å®ç°å¨ææ´¾åãé¢åå¯¹è±¡çç¼ç¨è¯­è¨æ­£æ¯é æ­¤æºå¶å®ç°äºå¤ææ§(Polymorphic)ã
æ¶æ¯æºå¶(message passing)ï¼éè¿æ¶æ¯ä¼ éæ¥è°ç¨è¢«æ§è¡çå½æ°ãè¿ç§æºå¶æ¯å¨è¿è¡æ¶å¯ä»¥æ¹åå½æ°çè¡ä¸ºï¼çè³å½æ°å¯ä»¥æªå®ç°ï¼ä¹ä¸ä¼å¼åè¿è¡æ¶éè¯¯ãæ¯å¦Objective-Cä¸­å°±æ¯éè¿æ¶æ¯ä¼ éæ¥è°ç¨è¢«æ§è¡çå½æ°ï¼çè³å¯ä»¥å¨ç¨åºè¿è¡è¿ç¨ä¸­å®ç°ç­æ´æ°ä»£ç ã
ä»¥ä¸ä¸ç§æ´¾åæ¹å¼é½æå¶ä¼å£ï¼æ¯å¦éææ´¾åçéåº¦æ¯æå¿«çï¼ä½å¹¶ä¸çµæ´»ãèå¨ææ´¾åè½ç¶æ¯è¾æ¢ï¼ä½å´å¯ä»¥å®ç°é¢åå¯¹è±¡å¤æçåè½ãæ¶æ¯æºå¶æ¯æçµæ´»çæ¹å¼ï¼ä½æ§è½ä¹æå·®ã&lt;/p>
&lt;h2 id="ç±»åæ¦é¤">ç±»åæ¦é¤&lt;/h2>
&lt;h2 id="èå½æ°è¡¨">èå½æ°è¡¨&lt;/h2>
&lt;h2 id="å­å¸">å­å¸&lt;/h2>
&lt;h2 id="åæå">åæå&lt;/h2>
&lt;h2 id="æ¨¡ç">æ¨¡ç&lt;/h2>
&lt;h2 id="è¡å°">è¡å°&lt;/h2>
&lt;h1 id="æ»ç»">æ»ç»&lt;/h1></content></item><item><title>éæµç®æ³</title><link>https://xujiajiadexiaokeai.github.io/2022-08-20/current-limiting-algorithm/</link><pubDate>Sat, 20 Aug 2022 15:16:17 +0800</pubDate><guid>https://xujiajiadexiaokeai.github.io/2022-08-20/current-limiting-algorithm/</guid><description>åºå®çªå£ æ»å¨çªå£ æ¼æ ä»¤çæ¡¶</description><content>&lt;h1 id="åºå®çªå£">åºå®çªå£&lt;/h1>
&lt;h1 id="æ»å¨çªå£">æ»å¨çªå£&lt;/h1>
&lt;h1 id="æ¼æ">æ¼æ&lt;/h1>
&lt;h1 id="ä»¤çæ¡¶">ä»¤çæ¡¶&lt;/h1></content></item><item><title>Goroutine</title><link>https://xujiajiadexiaokeai.github.io/2022-07-13/go-goroutine/</link><pubDate>Wed, 13 Jul 2022 10:16:17 +0800</pubDate><guid>https://xujiajiadexiaokeai.github.io/2022-07-13/go-goroutine/</guid><description>åºæ¬æ¦å¿µ è¿ç¨ è¿ç¨æ¯åºç¨ç¨åºçå¯å¨å®ä¾ æç¬ç«çåå­ç©ºé´ ä¸åè¿ç¨éè¿è¿ç¨é´éä¿¡çæ¹å¼è¿è¡éä¿¡ çº¿ç¨ çº¿ç¨æ¯cpuè°åº¦çåºæ¬åä½ ä¸åçº¿ç¨å¯ä»¥å±äº«è¿ç¨çèµæº ä¸åçº¿ç¨éè¿å±äº«åå­ç­çº¿ç¨é´éä¿¡æ¹å¼è¿è¡éä¿¡ åç¨ åç¨è°åº¦ç±ç¨æ·ç¨åºæä¾,ä¸ç´æ¥åæä½ç³»ç»è°åº¦ åç¨è°åº¦å¨æç§è°åº¦ç­ç¥æåç¨è°åº¦å°çº¿ç¨ä¸­æ§è¡ åç¨çä¼å¿ è¿å¤ççº¿ç¨ä¼å¯¼è´ä¸ä¸æåæ¢çå¼éåå¤§,èå·¥ä½å¨ç¨æ·æçåç¨åè½å¤§å¤§åå°ä¸ä¸æåæ¢çå¼é
åç¨è°åº¦å¨æå¯è¿è¡çåç¨éä¸ªè°åº¦å°çº¿ç¨ä¸­æ§è¡,åæ¶åæ¶æé»å¡çåç¨è°åº¦åºçº¿ç¨
ææå°é¿åäºçº¿ç¨çé¢ç¹åæ¢
å®ç°äºä½¿ç¨å°éçº¿ç¨å®ç°é«å¹¶åçææ
å¤ä¸ªåç¨åäº«æä½ç³»ç»åç»çº¿ç¨çæ¶é´ç
åç¨è°åº¦å¨å³å®äºåç¨è¿è¡çé¡ºåº
çº¿ç¨è¿è¡è°åº¦å¨ææ´¾çåç¨,æ¯ä¸æ¶å»åªè½è¿è¡ä¸ä¸ªåç¨
è°åº¦æ¨¡å çº¿ç¨æ¨¡å çº¿ç¨å¯åä¸ºç¨æ·çº¿ç¨ååæ ¸çº¿ç¨ ç¨æ·çº¿ç¨ç±ç¨æ·åå»ºãåæ­¥åéæ¯
æ ¹æ®ç¨æ·çº¿ç¨ç®¡çæ¹å¼çä¸å,åä¸ºä¸ç§çº¿ç¨æ¨¡å:
N:1æ¨¡å Nä¸ªç¨æ·çº¿ç¨è¿è¡å¨1ä¸ªåæ ¸çº¿ç¨ä¸­,ä¸ä¸æåæ¢è¾å¿« 1:1æ¨¡å æ¯ä¸ªç¨æ·çº¿ç¨å¯¹åºä¸ä¸ªåæ ¸çº¿ç¨,ä¸ä¸æåæ¢è¾æ¢ M:Næ¨¡å ååå©ç¨cpuä¸ä¸ä¸æåæ¢è¾å¿«,ä½è°åº¦ç®æ³è¾ä¸ºå¤æ Go GPMæ¨¡å G: goroutine,Goåç¨,æ¯ä¸ªgoå³é®å­é½ä¼åå»ºä¸ä¸ªgoroutine
P: processor,å¤çå¨(Goå®ä¹çä¸ä¸ªæ¦å¿µ,ä¸æ¯æcpu),åå«è¿è¡Goä»£ç çå¿è¦èµæº,ä¹æè°åº¦goroutineçè½å
M: machine,å·¥ä½çº¿ç¨,ç±æä½ç³»ç»è°åº¦
Må¿é¡»ææPæè½è¿è¡ä»£ç  Mä¼è¢«ç³»ç»è°ç¨é»å¡
Pçä¸ªæ°å¨ç¨åºå¯å¨æ¶å³å®,é»è®¤ç­äºCPUçæ ¸æ°,å¯ä»¥ä½¿ç¨ç¯å¢åéGOMAXPROCSæå¨ç¨åºä¸­ä½¿ç¨runtime.GOMAXPROCS()æ¹æ³æå®Pçä¸ªæ°
export GOMAXPROC=80 runtime.GOMAXPROCS(80) Mçä¸ªæ°éå¸¸ç¨å¤§äºPçä¸ªæ°,å ä¸ºé¤äºè¿è¡Goä»£ç ,è¿æå¶ä»åç½®ä»»å¡éè¦å¤ç.
è°åº¦ç­ç¥ éåè½®è½¬ æ¯ä¸ªå¤çå¨Pç»´æ¤çä¸ä¸ªåç¨Gçéå, å¤çå¨Pä¾æ¬¡å°åç¨Gè°åº¦å°Mä¸­æ§è¡ Pä¼å¨ææ§å°æ¥çå¨å±éåä¸­æ¯å¦æGå¾è¿è¡,é²æ­¢âé¥¥é¥¿â å¨å±éåä¸­çGä¸»è¦æ¥èªä»ç³»ç»è°ç¨ä¸­æ¢å¤çG
ç³»ç»è°ç¨</description><content>&lt;h1 id="åºæ¬æ¦å¿µ">åºæ¬æ¦å¿µ&lt;/h1>
&lt;ol>
&lt;li>è¿ç¨&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>è¿ç¨æ¯åºç¨ç¨åºçå¯å¨å®ä¾&lt;/li>
&lt;li>æç¬ç«çåå­ç©ºé´&lt;/li>
&lt;li>ä¸åè¿ç¨éè¿è¿ç¨é´éä¿¡çæ¹å¼è¿è¡éä¿¡&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>çº¿ç¨&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>çº¿ç¨æ¯cpuè°åº¦çåºæ¬åä½&lt;/li>
&lt;li>ä¸åçº¿ç¨å¯ä»¥å±äº«è¿ç¨çèµæº&lt;/li>
&lt;li>ä¸åçº¿ç¨éè¿å±äº«åå­ç­çº¿ç¨é´éä¿¡æ¹å¼è¿è¡éä¿¡&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>åç¨&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>åç¨è°åº¦ç±ç¨æ·ç¨åºæä¾,ä¸ç´æ¥åæä½ç³»ç»è°åº¦&lt;/li>
&lt;li>åç¨è°åº¦å¨æç§è°åº¦ç­ç¥æåç¨è°åº¦å°çº¿ç¨ä¸­æ§è¡&lt;/li>
&lt;/ul>
&lt;h1 id="åç¨çä¼å¿">åç¨çä¼å¿&lt;/h1>
&lt;p>è¿å¤ççº¿ç¨ä¼å¯¼è´ä¸ä¸æåæ¢çå¼éåå¤§,èå·¥ä½å¨ç¨æ·æçåç¨åè½å¤§å¤§åå°ä¸ä¸æåæ¢çå¼é&lt;/p>
&lt;p>åç¨è°åº¦å¨æå¯è¿è¡çåç¨éä¸ªè°åº¦å°çº¿ç¨ä¸­æ§è¡,åæ¶åæ¶æé»å¡çåç¨è°åº¦åºçº¿ç¨&lt;/p>
&lt;p>ææå°é¿åäºçº¿ç¨çé¢ç¹åæ¢&lt;/p>
&lt;p>å®ç°äºä½¿ç¨å°éçº¿ç¨å®ç°é«å¹¶åçææ&lt;/p>
&lt;p>å¤ä¸ªåç¨åäº«æä½ç³»ç»åç»çº¿ç¨çæ¶é´ç&lt;/p>
&lt;p>åç¨è°åº¦å¨å³å®äºåç¨è¿è¡çé¡ºåº&lt;/p>
&lt;p>çº¿ç¨è¿è¡è°åº¦å¨ææ´¾çåç¨,æ¯ä¸æ¶å»åªè½è¿è¡ä¸ä¸ªåç¨&lt;/p>
&lt;h1 id="è°åº¦æ¨¡å">è°åº¦æ¨¡å&lt;/h1>
&lt;ol>
&lt;li>çº¿ç¨æ¨¡å
çº¿ç¨å¯åä¸ºç¨æ·çº¿ç¨ååæ ¸çº¿ç¨&lt;/li>
&lt;/ol>
&lt;p>ç¨æ·çº¿ç¨ç±ç¨æ·åå»ºãåæ­¥åéæ¯&lt;/p>
&lt;p>æ ¹æ®ç¨æ·çº¿ç¨ç®¡çæ¹å¼çä¸å,åä¸ºä¸ç§çº¿ç¨æ¨¡å:&lt;/p>
&lt;ul>
&lt;li>N:1æ¨¡å
Nä¸ªç¨æ·çº¿ç¨è¿è¡å¨1ä¸ªåæ ¸çº¿ç¨ä¸­,ä¸ä¸æåæ¢è¾å¿«&lt;/li>
&lt;li>1:1æ¨¡å
æ¯ä¸ªç¨æ·çº¿ç¨å¯¹åºä¸ä¸ªåæ ¸çº¿ç¨,ä¸ä¸æåæ¢è¾æ¢&lt;/li>
&lt;li>M:Næ¨¡å
ååå©ç¨cpuä¸ä¸ä¸æåæ¢è¾å¿«,ä½è°åº¦ç®æ³è¾ä¸ºå¤æ&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>Go GPMæ¨¡å&lt;/li>
&lt;/ol>
&lt;p>G: goroutine,Goåç¨,æ¯ä¸ª&lt;code>go&lt;/code>å³é®å­é½ä¼åå»ºä¸ä¸ªgoroutine&lt;/p>
&lt;p>P: processor,å¤çå¨(Goå®ä¹çä¸ä¸ªæ¦å¿µ,ä¸æ¯æcpu),åå«è¿è¡Goä»£ç çå¿è¦èµæº,ä¹æè°åº¦goroutineçè½å&lt;/p>
&lt;p>M: machine,å·¥ä½çº¿ç¨,ç±æä½ç³»ç»è°åº¦&lt;/p>
&lt;p>Må¿é¡»ææPæè½è¿è¡ä»£ç 
Mä¼è¢«ç³»ç»è°ç¨é»å¡&lt;/p>
&lt;p>Pçä¸ªæ°å¨ç¨åºå¯å¨æ¶å³å®,é»è®¤ç­äºCPUçæ ¸æ°,å¯ä»¥ä½¿ç¨ç¯å¢åéGOMAXPROCSæå¨ç¨åºä¸­ä½¿ç¨runtime.GOMAXPROCS()æ¹æ³æå®Pçä¸ªæ°&lt;/p>
&lt;pre tabindex="0">&lt;code>export GOMAXPROC=80
runtime.GOMAXPROCS(80)
&lt;/code>&lt;/pre>&lt;p>Mçä¸ªæ°éå¸¸ç¨å¤§äºPçä¸ªæ°,å ä¸ºé¤äºè¿è¡Goä»£ç ,è¿æå¶ä»åç½®ä»»å¡éè¦å¤ç.&lt;/p>
&lt;h1 id="è°åº¦ç­ç¥">è°åº¦ç­ç¥&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>éåè½®è½¬
æ¯ä¸ªå¤çå¨Pç»´æ¤çä¸ä¸ªåç¨Gçéå, å¤çå¨Pä¾æ¬¡å°åç¨Gè°åº¦å°Mä¸­æ§è¡
Pä¼å¨ææ§å°æ¥çå¨å±éåä¸­æ¯å¦æGå¾è¿è¡,é²æ­¢âé¥¥é¥¿â
å¨å±éåä¸­çGä¸»è¦æ¥èªä»ç³»ç»è°ç¨ä¸­æ¢å¤çG&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ç³»ç»è°ç¨&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Pçä¸ªæ°é»è®¤ç­äºCPUçæ ¸æ°, æ¯ä¸ªMå¿é¡»ææä¸ä¸ªPæè½æ§è¡G
ä¸è¬æåµä¸Mçä¸ªæ°ç¥å¤§äºP,å¤åºæ¥çMå°ä¼å¨Gäº§çç³»ç»è°ç¨æ¶åæ¥ä½ç¨&lt;/p>
&lt;p>Mæ± 
å½Mè¿è¡çæä¸ªGäº§çç³»ç»è°ç¨æ¶: // TODO&lt;/p>
&lt;ol start="3">
&lt;li>å·¥ä½éçªå
éè¿&lt;code>go&lt;/code>å³é®å­åå»ºçåç¨éå¸¸ä¼ä¼åæ¾å°å½ååç¨å¯¹åºçå¤å¤çå¨éåä¸­
å¯è½æäºåç¨èªèº«ä¼ä¸æ­æ´¾çæ°åç¨,æäºåç¨ä¸ä¼æ´¾ç,å¯¼è´å¤ä¸ªPä¸­ç»´æ¤çGéåæ¯ä¸åè¡¡ç&lt;/li>
&lt;/ol>
&lt;p>æä»¥Goè°åº¦å¨æä¾äºå·¥ä½éçªåç­ç¥: å½æä¸ªPæ²¡æéè¦è°åº¦çåç¨æ¶, å°ä»å¶ä»å¤çå¨ä¸­å·ååç¨&lt;/p>
&lt;p>åççªåå,ä¼æ¥è¯¢å¨å±éå,å¦æå¨å±éåä¸­æ²¡æéè¦è°åº¦çåç¨,æä¼ä»å¶ä»Pä¸­å·å,ä¸æ¬¡å·ä¸å&lt;/p>
&lt;ol start="4">
&lt;li>æ¢å å¼è°åº¦
é¿åæä¸ªåç¨é¿æ¶é´æ§è¡,èé»ç¢å¶ä»åç¨è¢«è°åº¦çæºå¶&lt;/li>
&lt;/ol>
&lt;p>è°åº¦å¨ä¼çæ§æ¯ä¸ªåç¨çæ§è¡æ¶é´, ä¸æ¦æ§è¡æ¶é´è¿ç¨ä¸æå¶ä»åç¨å¨ç­å¾æ¶,ä¼æå½ååç¨æå,è½¬èè°åº¦ç­å¾çåç¨,ç±»ä¼¼&lt;code>æ¶é´çè½®è½¬&lt;/code>&lt;/p></content></item><item><title>Go Memory</title><link>https://xujiajiadexiaokeai.github.io/2022-07-13/go-memory/</link><pubDate>Wed, 13 Jul 2022 08:15:17 +0800</pubDate><guid>https://xujiajiadexiaokeai.github.io/2022-07-13/go-memory/</guid><description>åå­åé åå­åéè¿ç¨ éå¯¹å¾åéå¯¹è±¡å¤§å°çä¸åæä¸åçåéé»è¾:
(0, 16B)ä¸ä¸åå«æéçå¯¹è±¡: Tinyåé (0, 16B)ä¸åå«æéçå¯¹è±¡: æ­£å¸¸åé [16B, 32KB] : æ­£å¸¸åé (32KB, â): å¤§å¯¹è±¡åé ä»¥ç³è¯·sizeä¸ºnçåå­ä¸ºä¾,åéæ­¥éª¤å¦ä¸:
è·åå½åçº¿ç¨çç§æç¼å­mcache æ ¹æ®sizeè®¡ç®åºéåçclassçID ä»mcacheçalloc[class]é¾è¡¨ä¸­æ¥è¯¢å¯ç¨çspan å¦æmacacheæ²¡æå¯ç¨çspan, åä»mcentralç³è¯·ä¸ä¸ªæ°çspanå å¥mcache å¦æmcentralä¸­ä¹æ²¡æå¯ç¨çspan, åä»mheapä¸­ç³è¯·ä¸ä¸ªæ°çspanå å¥mcentral ä»è¯¥spanä¸­è·åç©ºé²å¯¹è±¡å°åå¹¶è¿å å°ç» Goç¨åºå¯å¨æ¶ç³è¯·ä¸å¤§ååå­, å¹¶ååæspanãbitmapãarenaåºå arenaåºåæé¡µååæä¸ä¸ªä¸ªå°å spanç®¡çä¸ä¸ªæå¤ä¸ªé¡µ mcentralç®¡çå¤ä¸ªspanä¾çº¿ç¨ç³è¯·ä½¿ç¨ mcacheä½ä¸ºçº¿ç¨ç§æèµæº, èµæºæ¥æºäºmcentral åå¾åæ¶ å¸¸è§åå¾åæ¶ç®æ³ å¼ç¨è®¡æ° å¯¹æ¯ä¸ªå¯¹è±¡ç»´æ¤ä¸ä¸ªå¼ç¨è®¡æ°, å½å¼ç¨æ¹å¯¹è±¡çå¯¹è±¡è¢«éæ¯æ¶,å¼ç¨è®¡æ°å1, å½å¼ç¨è®¡æ°å¨ä¸º0æ¶åæ¶æ¹å¯¹è±¡ ä¼ç¹: å¯¹è±¡å¯ä»¥å¾å¿«è¢«åæ¶,ä¸ä¼åºç°åå­èå°½æè¾¾å°æä¸ªéå¼æ¶æåæ¶ ç¼ºç¹: ä¸è½å¾å¥½å°å¤çå¾ªç¯å¼ç¨, èä¸å®æ¶ç»´æ¤å¼ç¨è®¡æ°ä¹æä¸å®ä»£ä»·
æ è®°-æ¸é¤ ä»æ ¹åéå¼å§éåææå¼ç¨å¯¹è±¡, å¼ç¨çå¯¹è±¡æ è®°ä¸ºâè¢«å¼ç¨â, æ²¡ææ è®°çå¯¹è±¡è¢«åæ¶ ä¼ç¹: è§£å³äºå¼ç¨è®¡æ°çç¼ºç¹ ç¼ºç¹: éè¦âStop The Worldâ
åä»£æ¶é æç§å¯¹è±¡çå½å¨æçé¿ç­ååä¸åçä»£ç©ºé´, çå½å¨æé¿çæ¾å¥èçä»£, ç­çæ¾å¥æ°çä»£, ä¸åä»£æä¸åçåæ¶ç®æ³ååæ¶é¢ç ä¼ç¹: åæ¶æ§è½å¥½ ç¼ºç¹: ç®æ³å¤æ</description><content>&lt;h1 id="åå­åé">åå­åé&lt;/h1>
&lt;h2 id="åå­åéè¿ç¨">åå­åéè¿ç¨&lt;/h2>
&lt;p>éå¯¹å¾åéå¯¹è±¡å¤§å°çä¸åæä¸åçåéé»è¾:&lt;/p>
&lt;ul>
&lt;li>(0, 16B)ä¸ä¸åå«æéçå¯¹è±¡: Tinyåé&lt;/li>
&lt;li>(0, 16B)ä¸åå«æéçå¯¹è±¡: æ­£å¸¸åé&lt;/li>
&lt;li>[16B, 32KB] : æ­£å¸¸åé&lt;/li>
&lt;li>(32KB, â): å¤§å¯¹è±¡åé&lt;/li>
&lt;/ul>
&lt;p>ä»¥ç³è¯·sizeä¸ºnçåå­ä¸ºä¾,åéæ­¥éª¤å¦ä¸:&lt;/p>
&lt;ol>
&lt;li>è·åå½åçº¿ç¨çç§æç¼å­mcache&lt;/li>
&lt;li>æ ¹æ®sizeè®¡ç®åºéåçclassçID&lt;/li>
&lt;li>ä»mcacheçalloc[class]é¾è¡¨ä¸­æ¥è¯¢å¯ç¨çspan&lt;/li>
&lt;li>å¦æmacacheæ²¡æå¯ç¨çspan, åä»mcentralç³è¯·ä¸ä¸ªæ°çspanå å¥mcache&lt;/li>
&lt;li>å¦æmcentralä¸­ä¹æ²¡æå¯ç¨çspan, åä»mheapä¸­ç³è¯·ä¸ä¸ªæ°çspanå å¥mcentral&lt;/li>
&lt;li>ä»è¯¥spanä¸­è·åç©ºé²å¯¹è±¡å°åå¹¶è¿å&lt;/li>
&lt;/ol>
&lt;h2 id="å°ç»">å°ç»&lt;/h2>
&lt;ul>
&lt;li>Goç¨åºå¯å¨æ¶ç³è¯·ä¸å¤§ååå­, å¹¶ååæspanãbitmapãarenaåºå&lt;/li>
&lt;li>arenaåºåæé¡µååæä¸ä¸ªä¸ªå°å&lt;/li>
&lt;li>spanç®¡çä¸ä¸ªæå¤ä¸ªé¡µ&lt;/li>
&lt;li>mcentralç®¡çå¤ä¸ªspanä¾çº¿ç¨ç³è¯·ä½¿ç¨&lt;/li>
&lt;li>mcacheä½ä¸ºçº¿ç¨ç§æèµæº, èµæºæ¥æºäºmcentral&lt;/li>
&lt;/ul>
&lt;h1 id="åå¾åæ¶">åå¾åæ¶&lt;/h1>
&lt;h2 id="å¸¸è§åå¾åæ¶ç®æ³">å¸¸è§åå¾åæ¶ç®æ³&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>å¼ç¨è®¡æ°
å¯¹æ¯ä¸ªå¯¹è±¡ç»´æ¤ä¸ä¸ªå¼ç¨è®¡æ°, å½å¼ç¨æ¹å¯¹è±¡çå¯¹è±¡è¢«éæ¯æ¶,å¼ç¨è®¡æ°å1, å½å¼ç¨è®¡æ°å¨ä¸º0æ¶åæ¶æ¹å¯¹è±¡
ä¼ç¹: å¯¹è±¡å¯ä»¥å¾å¿«è¢«åæ¶,ä¸ä¼åºç°åå­èå°½æè¾¾å°æä¸ªéå¼æ¶æåæ¶
ç¼ºç¹: ä¸è½å¾å¥½å°å¤çå¾ªç¯å¼ç¨, èä¸å®æ¶ç»´æ¤å¼ç¨è®¡æ°ä¹æä¸å®ä»£ä»·&lt;/p>
&lt;/li>
&lt;li>
&lt;p>æ è®°-æ¸é¤
ä»æ ¹åéå¼å§éåææå¼ç¨å¯¹è±¡, å¼ç¨çå¯¹è±¡æ è®°ä¸ºâè¢«å¼ç¨â, æ²¡ææ è®°çå¯¹è±¡è¢«åæ¶
ä¼ç¹: è§£å³äºå¼ç¨è®¡æ°çç¼ºç¹
ç¼ºç¹: éè¦âStop The Worldâ&lt;/p>
&lt;/li>
&lt;li>
&lt;p>åä»£æ¶é
æç§å¯¹è±¡çå½å¨æçé¿ç­ååä¸åçä»£ç©ºé´, çå½å¨æé¿çæ¾å¥èçä»£, ç­çæ¾å¥æ°çä»£, ä¸åä»£æä¸åçåæ¶ç®æ³ååæ¶é¢ç
ä¼ç¹: åæ¶æ§è½å¥½
ç¼ºç¹: ç®æ³å¤æ&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="goåå¾åæ¶">Goåå¾åæ¶&lt;/h2>
&lt;h3 id="æ è®°-æ¸é¤ç®æ³åç">âæ è®°-æ¸é¤âç®æ³åç&lt;/h3>
&lt;h3 id="åå­æ è®°">åå­æ è®°&lt;/h3>
&lt;p>å¨&lt;code>mspan&lt;/code>çæ°æ®ç»æä¸­, bitmap&lt;code>allocBits&lt;/code>è¡¨ç¤ºæ¯ä¸ªåå­åçä½¿ç¨æåµ, bitmap&lt;code>gcmarkBits&lt;/code>ç¨äºæ è®°åå­åè¢«å¼ç¨çæåµ
å¨æ è®°é¶æ®µå¯¹æ¯ååå­è¿è¡æ è®°, æå¯¹è±¡å¼ç¨çåå­æ è®°ä¸º1,æ²¡æå¼ç¨çä¿æä¸º0(default)
&lt;code>allocBits&lt;/code>å&lt;code>gcmarkBits&lt;/code>çæ°æ®ç»æå®å¨ä¸æ ·, æ è®°ç»æåè¿è¡åå­åæ¶, åæ¶æ¶å°allocBitsæågcmarkBits, ä»£è¡¨æ è®°è¿çåå­ææ¯å­æ´»ç, gcmarkBitsä¼å¨ä¸æ¬¡æ è®°æ¶éæ°åéåå­&lt;/p>
&lt;h3 id="ä¸è²æ è®°æ³">ä¸è²æ è®°æ³&lt;/h3>
&lt;p>ä¸è²ä¸»è¦æ¯ä¸ºäºå¯¹åºgcè¿ç¨ä¸­å¯¹è±¡çä¸ç§ç¶æ:&lt;/p>
&lt;ul>
&lt;li>ç°è²: å¯¹è±¡è¿å¨æ è®°éåä¸­ç­å¾&lt;/li>
&lt;li>é»è²: å¯¹è±¡å·²è¢«æ è®°, gcmarkBitså¯¹åºçä½ä¸º1(æ¬æ¬¡ä¸ä¼è¢«æ¸ç)&lt;/li>
&lt;li>ç½è²: å¯¹è±¡æªè¢«æ è®°, gcmarkBitså¯¹åºçä½ä¸º0(æ¬æ¬¡ä¼è¢«æ¸ç)&lt;/li>
&lt;/ul>
&lt;h3 id="stop-the-world">Stop The World&lt;/h3>
&lt;p>å¨gcè¿ç¨ä¸­, éè¦æ§å¶åå­çåå, å¦åå¨åæ¶è¿ç¨ä¸­æéä¼ éä¼å¼èµ·åå­å¼ç¨å³ç³»åå
STWæ¶é´çé¿ç­ç´æ¥å½±åäºåºç¨çæ§è¡&lt;/p>
&lt;h2 id="åå¾åæ¶ä¼å">åå¾åæ¶ä¼å&lt;/h2>
&lt;h3 id="åå±éwrite-barrier">åå±é(Write Barrier)&lt;/h3>
&lt;p>STWçç®çæ¯é²æ­¢GCæ«ææ¶åå­ååèåæ­¢goroutine, èåå±éå°±æ¯è®©goroutineä¸GCåæ¶è¿è¡çææ®µ.
è½ç¶åå±éä¸è½å®å¨æ¶é¤STW,ä½æ¯å¯ä»¥å¤§å¤§ç¼©ç­STWçæ¶é´&lt;/p>
&lt;h3 id="è¾å©gcmutator-assist">è¾å©GC(Mutator Assist)&lt;/h3>
&lt;p>å¨GCè¿ç¨ä¸­, å¦ægoroutineéè¦åéåå­, é£ä¹æ¹goroutineä¼åä¸ä»¥é¨åGCçå·¥ä½&lt;/p>
&lt;h2 id="gcçè§¦åæ¶æº">GCçè§¦åæ¶æº&lt;/h2>
&lt;ol>
&lt;li>åå­åééè¾¾å°éå¼è§¦åGC&lt;/li>
&lt;li>å®æè§¦åGC&lt;/li>
&lt;li>æå¨è§¦å&lt;/li>
&lt;/ol>
&lt;h2 id="gcæ§è½ä¼å">GCæ§è½ä¼å&lt;/h2>
&lt;p>GCæ§è½ä¸å¯¹è±¡æ°éè´ç¸å³&lt;/p>
&lt;ul>
&lt;li>åå°å¯¹è±¡åé: å¯¹è±¡å¤ç¨æä½¿ç¨å¤§å¯¹è±¡ç»åå¤ä¸ªå°å¯¹è±¡&lt;/li>
&lt;li>åå­éé¸ä¹ä¼å éGCè´æ&lt;/li>
&lt;/ul>
&lt;h1 id="éé¸åæ">éé¸åæ&lt;/h1>
&lt;p>éé¸åæ(escape analysis)æ¯æç¼è¯å¨å³å®åå­åéçä½ç½®, ä¸éè¦ç¨åºåæå®
å¨å½æ°ä¸­ç³è¯·ä¸ä¸ªæ°çå¯¹è±¡:&lt;/p>
&lt;ul>
&lt;li>å¦æåéå¨æ ä¸­, åå½æ°æ§è¡ç»æåå¯èªå¨å°åå­åæ¶&lt;/li>
&lt;li>å¦æåéå¨å ä¸­, åå½æ°æ§è¡ç»æåå¯äº¤ç»GCå¤ç&lt;/li>
&lt;/ul>
&lt;h2 id="éé¸ç­ç¥">éé¸ç­ç¥&lt;/h2>
&lt;p>å¨å½æ°ä¸­ç³è¯·ä¸ä¸ªé²çå¯¹è±¡, ç¼è¯å¨ä¼æ ¹æ®è¯¥å¯¹è±¡æ¯å¦è¢«å½æ°å¤é¨å¼ç¨æ¥å³å®æ¯å¦éé¸:&lt;/p>
&lt;ul>
&lt;li>å¦æå½æ°å¤é¨æ²¡æå¼ç¨, åä¼åæ¾å¥æ ä¸­&lt;/li>
&lt;li>å¦æå½æ°å¤é¨å­å¨å¼ç¨, åä¼åæ¾å¥å ä¸­&lt;/li>
&lt;li>å¯¹äºä»å¨å½æ°åé¨ä½¿ç¨çå¯¹è±¡, ä¹æå¯è½æ¾å°å ä¸­, æ¯å¦åå­è¿å¤§è¶è¿æ çå¤§å°&lt;/li>
&lt;/ul>
&lt;h2 id="éé¸åºæ¯">éé¸åºæ¯&lt;/h2>
&lt;ol>
&lt;li>æééé¸
Goè¿åäºå±é¨åéçæé&lt;/li>
&lt;li>æ ç©ºé´ä¸è¶³
å½æ ç©ºé´ä¸è¶³ä»¥å­æ¾å½åå¯¹è±¡ææ æ³å¤æ­å½ååçé¿åº¦æ¶ä¼å°å¯¹è±¡åéå°å ä¸­&lt;/li>
&lt;li>å¨æç±»åéé¸
å¦æå½æ°ä¸­ä½¿ç¨äºå¨æç±»ååæ°, ç¼è¯æé´å¾é¾ç¡®å®åæ°ç±»å, ä¹ä¼äº§çéé¸&lt;/li>
&lt;li>é­åå¼ç¨å¯¹è±¡éé¸
é­åä¸­çå±é¨å¯¹è±¡ç±äºé­åçå¼ç¨, äº§çéé¸&lt;/li>
&lt;/ol>
&lt;h2 id="å°ç»-1">å°ç»&lt;/h2>
&lt;ul>
&lt;li>æ ä¸åéåå­æ¯å¨å ä¸­åéåå­ææ´é«çæç&lt;/li>
&lt;li>éé¸åæçç®çæ¯å³å®åéå°æ è¿æ¯å &lt;/li>
&lt;li>éé¸åæå¨ç¼è¯é¶æ®µå®æ&lt;/li>
&lt;/ul></content></item><item><title>Go Channel</title><link>https://xujiajiadexiaokeai.github.io/2022-07-12/go-channel/</link><pubDate>Tue, 12 Jul 2022 21:12:06 +0800</pubDate><guid>https://xujiajiadexiaokeai.github.io/2022-07-12/go-channel/</guid><description>è¯»ånilç®¡éåä¼é»å¡ å³é­çç®¡éä»ç¶å¯ä»¥è¯»åæ°æ® åå³é­çç®¡éåæ°æ®ä¼è§¦åpanic
åªæä¸ä¸ªç¼å²åºçç®¡é,åå¥æ°æ® â&amp;gt; å é; è¯»åºæ°æ® -&amp;gt; è§£é
ç¹æ§ åå§å åéå£°æ var ch chan int declare chan, value == nil make() ch1 := make(chan string) no-buffered chan ch2 := make(chan string, 5) buffered chan ç®¡éæä½ æä½ç¬¦: &amp;lt;- -&amp;gt; é»è®¤ä¸ºååå¯è¯»å,å¨å½æ°ä¼ éé´å¯ä½¿ç¨æä½ç¬¦éå¶è¯»å func ChanParamR(ch &amp;lt;-chan int) { only can read from chan } func ChanParamW(ch chan&amp;lt;- int) { only can write to chan } æ°æ®è¯»å åç¨è¯»åç®¡éæ¶,é»å¡çæ¡ä»¶æ: chan no-buffer chan buffer no data chan value == nil åç¨åå¥ç®¡éæ¶,é»å¡çæ¡ä»¶æ: chan no-buffer chan buffer is full chan value == nil å®ç°åç æ°æ®ç»æ https://cs.</description><content>&lt;p>è¯»ånilç®¡éåä¼é»å¡
å³é­çç®¡éä»ç¶å¯ä»¥è¯»åæ°æ®
åå³é­çç®¡éåæ°æ®ä¼è§¦åpanic&lt;/p>
&lt;p>åªæä¸ä¸ªç¼å²åºçç®¡é,åå¥æ°æ® â&amp;gt; å é; è¯»åºæ°æ® -&amp;gt; è§£é&lt;/p>
&lt;h1 id="ç¹æ§">ç¹æ§&lt;/h1>
&lt;h2 id="åå§å">åå§å&lt;/h2>
&lt;ul>
&lt;li>åéå£°æ&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">declare&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>make()&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">ch1&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#a6e22e">no&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">buffered&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span>
&lt;span style="color:#a6e22e">ch2&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>) &lt;span style="color:#a6e22e">buffered&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ç®¡éæä½">ç®¡éæä½&lt;/h2>
&lt;ul>
&lt;li>æä½ç¬¦: &amp;lt;- -&amp;gt;
é»è®¤ä¸ºååå¯è¯»å,å¨å½æ°ä¼ éé´å¯ä½¿ç¨æä½ç¬¦éå¶è¯»å&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">ChanParamR&lt;/span>(&lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;span style="color:#a6e22e">only&lt;/span> &lt;span style="color:#a6e22e">can&lt;/span> &lt;span style="color:#a6e22e">read&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">ChanParamW&lt;/span>(&lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span>&lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;span style="color:#a6e22e">only&lt;/span> &lt;span style="color:#a6e22e">can&lt;/span> &lt;span style="color:#a6e22e">write&lt;/span> &lt;span style="color:#a6e22e">to&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>æ°æ®è¯»å
åç¨è¯»åç®¡éæ¶,é»å¡çæ¡ä»¶æ:&lt;/li>
&lt;li>chan no-buffer&lt;/li>
&lt;li>chan buffer no data&lt;/li>
&lt;li>chan value == nil
åç¨åå¥ç®¡éæ¶,é»å¡çæ¡ä»¶æ:&lt;/li>
&lt;li>chan no-buffer&lt;/li>
&lt;li>chan buffer is full&lt;/li>
&lt;li>chan value == nil&lt;/li>
&lt;/ul>
&lt;h1 id="å®ç°åç">å®ç°åç&lt;/h1>
&lt;h2 id="æ°æ®ç»æ">æ°æ®ç»æ&lt;/h2>
&lt;blockquote>
&lt;p>&lt;a href="https://cs.opensource.google/go/go/+/refs/tags/go1.18.3:src/runtime/chan.go">https://cs.opensource.google/go/go/+/refs/tags/go1.18.3:src/runtime/chan.go&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">hchan&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">qcount&lt;/span> &lt;span style="color:#66d9ef">uint&lt;/span> &lt;span style="color:#75715e">// total data in the queue
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">dataqsiz&lt;/span> &lt;span style="color:#66d9ef">uint&lt;/span> &lt;span style="color:#75715e">// size of the circular queue
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">buf&lt;/span> &lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span> &lt;span style="color:#75715e">// points to an array of dataqsiz elements
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">elemsize&lt;/span> &lt;span style="color:#66d9ef">uint16&lt;/span>
&lt;span style="color:#a6e22e">closed&lt;/span> &lt;span style="color:#66d9ef">uint32&lt;/span>
&lt;span style="color:#a6e22e">elemtype&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">_type&lt;/span> &lt;span style="color:#75715e">// element type
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">sendx&lt;/span> &lt;span style="color:#66d9ef">uint&lt;/span> &lt;span style="color:#75715e">// send index
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">recvx&lt;/span> &lt;span style="color:#66d9ef">uint&lt;/span> &lt;span style="color:#75715e">// receive index
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">recvq&lt;/span> &lt;span style="color:#a6e22e">waitq&lt;/span> &lt;span style="color:#75715e">// list of recv waiters
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">sendq&lt;/span> &lt;span style="color:#a6e22e">waitq&lt;/span> &lt;span style="color:#75715e">// list of send waiters
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">// lock protects all fields in hchan, as well as several
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// fields in sudogs blocked on this channel.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Do not change another G&amp;#39;s status while holding this lock
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// (in particular, do not ready a G), as this can deadlock
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// with stack shrinking.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">lock&lt;/span> &lt;span style="color:#a6e22e">mutex&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>
&lt;p>ç¯å½¢éå
chanåé¨å®ç°äºä¸ä¸ªç¯å½¢éå,éåé¿åº¦å¨chanåå»ºæ¶æå®
sendx: éå°¾, åå¥ä½
recvx: éé¦, è¯»åä½&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ç­å¾éå&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>goroutineä»chanè¯» -&amp;gt; bufä¸ºç©ºææ²¡æbuf -&amp;gt; å½ågoroutineé»å¡ -&amp;gt; å å¥recvq&lt;/li>
&lt;li>goroutineåchanå -&amp;gt; bufå·²æ»¡ææ²¡æbuf -&amp;gt; å½ågoroutineé»å¡ -&amp;gt; å å¥sendq
å¤äºç­å¾éåä¸­çåç¨ä¼å¨å¶ä»åç¨æä½ç®¡éæ¶è¢«å¤é:&lt;/li>
&lt;li>å è¯»é»å¡çåç¨ä¼è¢«åç®¡éåå¥çåç¨å¤é&lt;/li>
&lt;li>å åé»å¡çåç¨ä¼è¢«ä»ç®¡éè¯»åçåç¨å¤é&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>Invariants:
At least one of c.sendq and c.recvq is empty,
except for the case of an unbuffered channel with a single goroutine
blocked on it for both sending and receiving using a select statement,
in which case the length of c.sendq and c.recvq is limited only by the
size of the select statement.
For buffered channels, also:
c.qcount &amp;gt; 0 implies that c.recvq is empty.
c.qcount &amp;lt; c.dataqsiz implies that c.sendq is empty.
&lt;/code>&lt;/pre>&lt;ol start="3">
&lt;li>ç±»åä¿¡æ¯&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>ä¸ä¸ªç®¡éåªè½ä¼ éä¸ç§ç±»åçå¼&lt;/li>
&lt;li>å¦æéè¦ç®¡éä¼ éä»»æç±»åçæ°æ®,å¯ä»¥ä½¿ç¨interface{}ç±»å&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>äºæ¥é
ä¸ä¸ªç®¡éåæ¶ä»åè®¸è¢«ä¸ä¸ªåç¨è¯»å&lt;/li>
&lt;/ol>
&lt;h2 id="ç®¡éæä½-1">ç®¡éæä½&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>åå»ºç®¡é
åå»ºç®¡é -&amp;gt; åå§åhchanç»æ&lt;/p>
&lt;/li>
&lt;li>
&lt;p>åå¥ç®¡é
trick:
å½æ¥æ¶éårecvqä¸ä¸ºç©ºæ¶,è¯´æç¼å²åºä¸­æ²¡ææ°æ®ä½æåç¨å¨ç­å¾æ°æ®
ä¼ææ°æ®ç´æ¥ä¼ éç»recvqéåä¸­çç¬¬ä¸ä¸ªåç¨,èä¸å¿ååå¥ç¼å²åº&lt;/p>
&lt;/li>
&lt;li>
&lt;p>è¯»åºç®¡é
trick:
å½ç­å¾åééåsendqä¸ä¸ºç©º,ä¸æ²¡æç¼å²åº,
é£ä¹æ­¤æ¶å°ç´æ¥ä»sendqéåçç¬¬ä¸ä¸ªåç¨ä¸­è·åæ°æ®&lt;/p>
&lt;/li>
&lt;li>
&lt;p>å³é­ç®¡é
å³é­ç®¡éæ¶ä¼ærecvqä¸­çåç¨å¨é¨å¤é, åç¨ä¼è·åå¯¹åºç±»åçé¶å¼
åæ¶ä¼æsendqéåä¸­çåç¨å¨é¨å¤é,åç¨ä¼è§¦åpanic&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>ä¼è§¦åpanicçæä½è¿æ:&lt;/p>
&lt;ul>
&lt;li>å³é­å¼ä¸ºnilçç®¡é&lt;/li>
&lt;li>å³é­å·²ç»è¢«å³é­çç®¡é&lt;/li>
&lt;li>åå·²ç»å³é­çç®¡éåå¥æ°æ®&lt;/li>
&lt;/ul>
&lt;h2 id="å¸¸è§ç¨æ³">å¸¸è§ç¨æ³&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>ååç®¡é&lt;/p>
&lt;/li>
&lt;li>
&lt;p>select
ä½¿ç¨selectå¯ä»¥çæ§å¤ä¸ªç®¡é
selectçcaseè¯­å¥è¯»ç®¡éæ¶ä¸ä¼é»å¡&lt;/p>
&lt;/li>
&lt;li>
&lt;p>for-range
for-rangeå¯ä»¥æç»­ä»ç®¡éä¸­è¯»åºæ°æ®,å½ç®¡éä¸­æ²¡ææ°æ®æ¶ä¼é»å¡å½ååç¨&lt;/p>
&lt;/li>
&lt;/ul></content></item></channel></rss>