<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>design-pattern on xujiajiadexiaokeai</title><link>https://xujiajiadexiaokeai.github.io/tags/design-pattern/</link><description>Recent content in design-pattern on xujiajiadexiaokeai</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© 2021-2023 xujiajiadexiaokeai</copyright><lastBuildDate>Sat, 15 Jan 2022 03:06:30 +0800</lastBuildDate><atom:link href="https://xujiajiadexiaokeai.github.io/tags/design-pattern/index.xml" rel="self" type="application/rss+xml"/><item><title>Design Patterns Notes</title><link>https://xujiajiadexiaokeai.github.io/2022-01-15/design-patterns/</link><pubDate>Sat, 15 Jan 2022 03:06:30 +0800</pubDate><guid>https://xujiajiadexiaokeai.github.io/2022-01-15/design-patterns/</guid><description>创建型模式(Creational Pattern) 单例模式(Singleton Pattern) 主要用于保证一个类仅有一个实例,并提供一个访问它的全局访问点
(1) 限制调用者直接实例化该对象
(2) 为该对象的单例提供一个全局唯一的访问方法
package msgpool ... // 消息池 type messagePool struct { pool *sync.Pool } // 消息池单例 var msgPool = &amp;amp;messagePool { // 如果消息池里没有消息,则新建一个Count值为0的Message实例 pool: &amp;amp;sync.Pool{New: func() interface{} { return &amp;amp;Message{Count: 0}}, } // 访问消息池单例的唯一方法 func Instence() *messagePool { return msgPool } // 向消息池里添加消息 func (m *messagePool) AddMsg(msg *Message) { m.pool.Put(msg) } // 从消息池里获取消息 func (m *messagePool) GetMsg() *Message { return m.pool.Get().(*Message) } .</description><content>&lt;h1 id="创建型模式creational-pattern">创建型模式(Creational Pattern)&lt;/h1>
&lt;h3 id="单例模式singleton-pattern">单例模式(Singleton Pattern)&lt;/h3>
&lt;p>主要用于保证一个类仅有一个实例,并提供一个访问它的全局访问点&lt;/p>
&lt;p>(1) 限制调用者直接实例化该对象&lt;/p>
&lt;p>(2) 为该对象的单例提供一个全局唯一的访问方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">msgpool&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#75715e">// 消息池
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">messagePool&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">pool&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">Pool&lt;/span>
}
&lt;span style="color:#75715e">// 消息池单例
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">msgPool&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">messagePool&lt;/span> {
&lt;span style="color:#75715e">// 如果消息池里没有消息,则新建一个Count值为0的Message实例
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">pool&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">Pool&lt;/span>{&lt;span style="color:#a6e22e">New&lt;/span>: &lt;span style="color:#66d9ef">func&lt;/span>() &lt;span style="color:#66d9ef">interface&lt;/span>{} { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Message&lt;/span>{&lt;span style="color:#a6e22e">Count&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>}},
}
&lt;span style="color:#75715e">// 访问消息池单例的唯一方法
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Instence&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">messagePool&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">msgPool&lt;/span>
}
&lt;span style="color:#75715e">// 向消息池里添加消息
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">messagePool&lt;/span>) &lt;span style="color:#a6e22e">AddMsg&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Message&lt;/span>) {
&lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">pool&lt;/span>.&lt;span style="color:#a6e22e">Put&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span>)
}
&lt;span style="color:#75715e">// 从消息池里获取消息
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">messagePool&lt;/span>) &lt;span style="color:#a6e22e">GetMsg&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Message&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">pool&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>().(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Message&lt;/span>)
}
&lt;span style="color:#f92672">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TestMessagePool&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;span style="color:#a6e22e">msg0&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">msgpool&lt;/span>.&lt;span style="color:#a6e22e">Instance&lt;/span>().&lt;span style="color:#a6e22e">GetMsg&lt;/span>()
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">msg0&lt;/span>.&lt;span style="color:#a6e22e">Count&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;expect msg count %d, but actual %d.&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#a6e22e">msg0&lt;/span>.&lt;span style="color:#a6e22e">Count&lt;/span>)
}
&lt;span style="color:#a6e22e">msg0&lt;/span>.&lt;span style="color:#a6e22e">Count&lt;/span> = &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#a6e22e">msgpool&lt;/span>.&lt;span style="color:#a6e22e">Instance&lt;/span>().&lt;span style="color:#a6e22e">AddMsg&lt;/span>(&lt;span style="color:#a6e22e">msg0&lt;/span>)
&lt;span style="color:#a6e22e">msg1&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">msgpool&lt;/span>.&lt;span style="color:#a6e22e">Instance&lt;/span>().&lt;span style="color:#a6e22e">GetMsg&lt;/span>()
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">msg1&lt;/span>.&lt;span style="color:#a6e22e">Count&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> {
&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;expect msg count %d, but actual %d.&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#a6e22e">msg1&lt;/span>.&lt;span style="color:#a6e22e">Count&lt;/span>)
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>饿汉模式与懒汉模式&lt;/p>
&lt;p>懒汉模式会带来线程安全问题,可以通过普通加锁,或者双重检验锁来优化&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#75715e">// 单例模式的“懒汉模式”实现
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">msgpool&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">once&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">Once&lt;/span>{}
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">msgPool&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">messagePool&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Instance&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">messagePool&lt;/span> {
&lt;span style="color:#75715e">// 在匿名函数中实现初始化逻辑,Go语言保证只会调用一次
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">once&lt;/span>.&lt;span style="color:#a6e22e">Do&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;span style="color:#a6e22e">msgPool&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">messagePool&lt;/span>{
&lt;span style="color:#75715e">// 如果消息池里没有消息, 则新建一个Count值为0的Message实例
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">pool&lt;/span>:&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">Poll&lt;/span>{&lt;span style="color:#a6e22e">New&lt;/span>: &lt;span style="color:#66d9ef">func&lt;/span>() &lt;span style="color:#66d9ef">interface&lt;/span>{} {&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Message&lt;/span>{&lt;span style="color:#a6e22e">Count&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>} }},
}
})
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">msgPool&lt;/span>
}
&lt;span style="color:#f92672">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="建造者模式builder-pattern">建造者模式(Builder Pattern)&lt;/h3>
&lt;p>(1) 封装复杂对象的创建过程,使对象使用者不感知复杂的创建逻辑&lt;/p>
&lt;p>(2) 可以一步步按照顺序对成员进行赋值,或者创建嵌套对象,并最终完成目标对象的创建&lt;/p>
&lt;p>(3) 对多个对象复用同样的对象创建逻辑&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">msg&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Message&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Header&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Header&lt;/span>
&lt;span style="color:#a6e22e">Body&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Body&lt;/span>
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Header&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">SrcAddr&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">SrcPort&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>
&lt;span style="color:#a6e22e">DestAddr&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">DestPort&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>
&lt;span style="color:#a6e22e">Items&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>] &lt;span style="color:#66d9ef">string&lt;/span>
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Body&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Item&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>
}
&lt;span style="color:#f92672">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">msg&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#75715e">// Message对象的Builder对象
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">builder&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">once&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">Once&lt;/span>
&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Message&lt;/span>
}
&lt;span style="color:#75715e">// 返回Builder对象
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Builder&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">builder&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">builder&lt;/span>{
&lt;span style="color:#a6e22e">once&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">Once&lt;/span>{},
&lt;span style="color:#a6e22e">msg&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Message&lt;/span>{&lt;span style="color:#a6e22e">Header&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Header&lt;/span>{}, &lt;span style="color:#a6e22e">Body&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Body&lt;/span>{}},
}
}
&lt;span style="color:#75715e">// 以下是对Message成员的构建方法
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">builder&lt;/span>) &lt;span style="color:#a6e22e">WithSrcAddr&lt;/span>(&lt;span style="color:#a6e22e">srcAddr&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">builder&lt;/span> {
&lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">SrcAddr&lt;/span> = &lt;span style="color:#a6e22e">srcAddr&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">builder&lt;/span>) &lt;span style="color:#a6e22e">WithSrcPort&lt;/span>(&lt;span style="color:#a6e22e">srcPort&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">builder&lt;/span> {
&lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">SrcPort&lt;/span> = &lt;span style="color:#a6e22e">srcPort&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">builder&lt;/span>) &lt;span style="color:#a6e22e">WithDestAddr&lt;/span>(&lt;span style="color:#a6e22e">destAddr&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">builder&lt;/span> {
&lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">DestAddr&lt;/span> = &lt;span style="color:#a6e22e">destAddr&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">builder&lt;/span>) &lt;span style="color:#a6e22e">WithHeaderItem&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span>, &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">builder&lt;/span> {
&lt;span style="color:#75715e">// 保证map只初始化一次
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">once&lt;/span>.&lt;span style="color:#a6e22e">Do&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Items&lt;/span> = make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>)
})
&lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Items&lt;/span>[&lt;span style="color:#a6e22e">key&lt;/span>] = &lt;span style="color:#a6e22e">value&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">builder&lt;/span>) &lt;span style="color:#a6e22e">WithBodyItem&lt;/span>(&lt;span style="color:#a6e22e">record&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">builder&lt;/span> {
&lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>.&lt;span style="color:#a6e22e">Items&lt;/span> = append(&lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>.&lt;span style="color:#a6e22e">Items&lt;/span>, &lt;span style="color:#a6e22e">record&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">builder&lt;/span>) &lt;span style="color:#a6e22e">Build&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Message&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">msg&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TestMessageBuilder&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;span style="color:#75715e">// 使用消息建造者进行对象创建
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Builder&lt;/span>().
&lt;span style="color:#a6e22e">WithSrcAddr&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;192.168.0.1&amp;#34;&lt;/span>).
&lt;span style="color:#a6e22e">WithSrcPost&lt;/span>(&lt;span style="color:#ae81ff">1234&lt;/span>).
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#a6e22e">Build&lt;/span>()
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">SrcAddr&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;192.168.0.1&amp;#34;&lt;/span> {
&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;expect src address 192.168.0.1, but actual %d.&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">SrcAddr&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>.&lt;span style="color:#a6e22e">Items&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;record1&amp;#34;&lt;/span> {
&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;expect body item0 record1, but actual %s.&amp;#34;&lt;/span>,&lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>.&lt;span style="color:#a6e22e">Items&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>])
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="工厂方法模式factory-method-pattern">工厂方法模式(Factory Method Pattern)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Type&lt;/span> &lt;span style="color:#66d9ef">uint8&lt;/span>
&lt;span style="color:#75715e">// 事件类型定义
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> (
&lt;span style="color:#a6e22e">Start&lt;/span> &lt;span style="color:#a6e22e">Type&lt;/span> = &lt;span style="color:#66d9ef">iota&lt;/span>
&lt;span style="color:#a6e22e">End&lt;/span>
)
&lt;span style="color:#75715e">// 事件抽象接口
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Event&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">EventType&lt;/span>() &lt;span style="color:#a6e22e">Type&lt;/span>
&lt;span style="color:#a6e22e">Content&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span>
}
&lt;span style="color:#75715e">// 开始事件,实现了Event接口
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">StartEvent&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{
&lt;span style="color:#a6e22e">content&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
}
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#75715e">// 结束事件,实现了Event接口
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">EndEvent&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{
&lt;span style="color:#a6e22e">content&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
}
&lt;span style="color:#f92672">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#75715e">// 事件工厂对象
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Factory&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}
&lt;span style="color:#75715e">// 根据事件类型创建具体事件
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Factory&lt;/span>) &lt;span style="color:#a6e22e">Create&lt;/span>(&lt;span style="color:#a6e22e">etype&lt;/span> &lt;span style="color:#a6e22e">Type&lt;/span>) &lt;span style="color:#a6e22e">Event&lt;/span> {
&lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">etype&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">Start&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">StartEvent&lt;/span>{
&lt;span style="color:#a6e22e">content&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;this is start event&amp;#34;&lt;/span>,
}
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">End&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">EndEvent&lt;/span>{
&lt;span style="color:#a6e22e">content&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;this is end event&amp;#34;&lt;/span>,
}
&lt;span style="color:#66d9ef">default&lt;/span>:
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TestEvent&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">OfStart&lt;/span>()
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">EventType&lt;/span>() &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span> {
&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;expect event.Start, but actual %v.&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">EventType&lt;/span>())
}
&lt;span style="color:#a6e22e">e&lt;/span> = &lt;span style="color:#a6e22e">factory&lt;/span>.&lt;span style="color:#a6e22e">Create&lt;/span>(&lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">End&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">EventType&lt;/span>() &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">End&lt;/span> {
&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;expect event.End, but actual %v.&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">EventType&lt;/span>())
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="抽象工厂模式abstract-factory-pattern">抽象工厂模式(Abstract Factory Pattern)&lt;/h3>
&lt;p>&lt;img src="https://tcs.teambition.net/storage/312dac721ae2e5db5dfd73d0091ddfb92a9e?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjU5Mzc3MGZmODM5NjMyMDAyZTAzNThmMSIsIl9hcHBJZCI6IjU5Mzc3MGZmODM5NjMyMDAyZTAzNThmMSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTY3NzgyNTE0NCwiaWF0IjoxNjc3MjIwMzQ0LCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzMxMmRhYzcyMWFlMmU1ZGI1ZGZkNzNkMDA5MWRkZmI5MmE5ZSJ9.hS5QO-KPxmoLc1gElEZACQdg8Z29DkGOyKs6l7Cnk0U&amp;amp;download=image.png" alt="" title="">&lt;/p>
&lt;p>&lt;img src="https://tcs.teambition.net/storage/312d15f97489776c7f78378dcfecc2069f7e?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjU5Mzc3MGZmODM5NjMyMDAyZTAzNThmMSIsIl9hcHBJZCI6IjU5Mzc3MGZmODM5NjMyMDAyZTAzNThmMSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTY3NzgyNTE0NCwiaWF0IjoxNjc3MjIwMzQ0LCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzMxMmQxNWY5NzQ4OTc3NmM3Zjc4Mzc4ZGNmZWNjMjA2OWY3ZSJ9.kv-n_k3L1VhlA53YDLWF9IscPVfEJTmkmoU15NILWe0&amp;amp;download=image.png" alt="" title="">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">plugin&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#75715e">// 插件抽象接口定义
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Plugin&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}
&lt;span style="color:#75715e">// 输入插件,用于接收消息
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Input&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Plugin&lt;/span>
&lt;span style="color:#a6e22e">Receive&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span>
}
&lt;span style="color:#75715e">// 过滤插件,用于处理消息
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Fliter&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Plugin&lt;/span>
&lt;span style="color:#a6e22e">Process&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span>
}
&lt;span style="color:#75715e">// 输出插件,用于发送消息
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Output&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Plugin&lt;/span>
&lt;span style="color:#a6e22e">Send&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>)
}
&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">pipeline&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#75715e">// 消息管道的定义
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Pipeline&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">input&lt;/span> &lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">Input&lt;/span>
&lt;span style="color:#a6e22e">filter&lt;/span> &lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">Filter&lt;/span>
&lt;span style="color:#a6e22e">output&lt;/span> &lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">Output&lt;/span>
}
&lt;span style="color:#75715e">// 一个消息的处理流程为 input -&amp;gt; filter -&amp;gt; output
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Pipeline&lt;/span>) &lt;span style="color:#a6e22e">Exec&lt;/span>() {
&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">intput&lt;/span>.&lt;span style="color:#a6e22e">Receive&lt;/span>()
&lt;span style="color:#a6e22e">msg&lt;/span> = &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">filter&lt;/span>.&lt;span style="color:#a6e22e">Process&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span>)
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">output&lt;/span>.&lt;span style="color:#a6e22e">Send&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">plugin&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#75715e">// input插件名称与类型的映射关系,主要用于通过反射创建input对象
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">inputNames&lt;/span> = make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">Type&lt;/span>)
&lt;span style="color:#75715e">// Hello input插件,接收”Hello World“消息
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">HelloInput&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">h&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">HelloInput&lt;/span>) &lt;span style="color:#a6e22e">Receive&lt;/span>() &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>
}
&lt;span style="color:#75715e">// 初始化input插件映射关系表
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span>() {
&lt;span style="color:#a6e22e">inputNames&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>] = &lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">TypeOf&lt;/span>(&lt;span style="color:#a6e22e">HelloInput&lt;/span>{})
}
&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">plugin&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#75715e">// filter插件名称与类型的映射关系.主要用于通过反射创建filter对象
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">filterNames&lt;/span> = make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">Type&lt;/span>)
&lt;span style="color:#75715e">// Upper filter插件,将消息全部字母转成大写
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">UpperFilter&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">UpperFilter&lt;/span>) &lt;span style="color:#a6e22e">Process&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">ToUpper&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span>)
}
&lt;span style="color:#75715e">// 初始化filter插件映射关系表
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span>() {
&lt;span style="color:#a6e22e">filterNames&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;upper&amp;#34;&lt;/span>] = &lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">TypeOf&lt;/span>(&lt;span style="color:#a6e22e">UpperFilter&lt;/span>{})
}
&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">plugin&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#75715e">// output插件名称与类型的映射关系,主要用于通过反射创建output对象
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">outputNames&lt;/span> = make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">Type&lt;/span>)
&lt;span style="color:#75715e">// Console output插件,将消息输出到控制台上
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ConsoleOutput&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ConsoleOutput&lt;/span>) &lt;span style="color:#a6e22e">Send&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span>)
}
&lt;span style="color:#75715e">// 初始化output插件映射关系表
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span>() {
&lt;span style="color:#a6e22e">outputNames&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;console&amp;#34;&lt;/span>] = &lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">TypeOf&lt;/span>(&lt;span style="color:#a6e22e">ConsoleOutput&lt;/span>{})
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">plugin&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#75715e">// 插件工厂接口
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Factory&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Create&lt;/span>(&lt;span style="color:#a6e22e">conf&lt;/span> &lt;span style="color:#a6e22e">Config&lt;/span>) &lt;span style="color:#a6e22e">Plugin&lt;/span>
}
&lt;span style="color:#75715e">// input插件工厂对象,实现Factory接口
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">InputFactory&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}
&lt;span style="color:#75715e">// 读取配置,通过反射机制进行对象实例化
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">InputFactory&lt;/span>) &lt;span style="color:#a6e22e">Create&lt;/span>(&lt;span style="color:#a6e22e">conf&lt;/span> &lt;span style="color:#a6e22e">Config&lt;/span>) &lt;span style="color:#a6e22e">Plugin&lt;/span> {
&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">inputNames&lt;/span>[&lt;span style="color:#a6e22e">conf&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>]
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>).&lt;span style="color:#a6e22e">Interface&lt;/span>().(&lt;span style="color:#a6e22e">Plugin&lt;/span>)
}
&lt;span style="color:#75715e">// filter和output插件工厂实现类似
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">FilterFactory&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">FilterFactory&lt;/span>) &lt;span style="color:#a6e22e">Create&lt;/span>(&lt;span style="color:#a6e22e">conf&lt;/span> &lt;span style="color:#a6e22e">Config&lt;/span>) &lt;span style="color:#a6e22e">Plugin&lt;/span> {
&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">filterNames&lt;/span>[&lt;span style="color:#a6e22e">conf&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>]
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>).&lt;span style="color:#a6e22e">Interface&lt;/span>().(&lt;span style="color:#a6e22e">Plugin&lt;/span>)
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">OutputFactory&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">o&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">OutputFactory&lt;/span>) &lt;span style="color:#a6e22e">Create&lt;/span>(&lt;span style="color:#a6e22e">conf&lt;/span> &lt;span style="color:#a6e22e">Config&lt;/span>) &lt;span style="color:#a6e22e">Plugin&lt;/span> {
&lt;span style="color:#a6e22e">r&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">outputNames&lt;/span>[&lt;span style="color:#a6e22e">conf&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>]
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>).&lt;span style="color:#a6e22e">Interface&lt;/span>().(&lt;span style="color:#a6e22e">Plugin&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">pipeline&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#75715e">// 保存用于创建Plugin的工厂实例,其中map的key为插件类型,value为抽象工厂接口
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">pluginFactories&lt;/span> = make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">Type&lt;/span>]&lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">Factory&lt;/span>)
&lt;span style="color:#75715e">// 根据plugin.Type返回对应Plugin类型的工厂实例
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">factoryOf&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">Type&lt;/span>) &lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">Factory&lt;/span> {
&lt;span style="color:#a6e22e">factory&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pluginFactories&lt;/span>[&lt;span style="color:#a6e22e">t&lt;/span>]
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">factory&lt;/span>
}
&lt;span style="color:#75715e">// pipeline工厂方法,根据配置创建一个Pipeline实例
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Of&lt;/span>(&lt;span style="color:#a6e22e">conf&lt;/span> &lt;span style="color:#a6e22e">Config&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Pipeline&lt;/span> {
&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Pipeline&lt;/span>{}
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">intput&lt;/span> = &lt;span style="color:#a6e22e">factoryOf&lt;/span>(&lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">InputType&lt;/span>).&lt;span style="color:#a6e22e">Create&lt;/span>(&lt;span style="color:#a6e22e">conf&lt;/span>.&lt;span style="color:#a6e22e">Input&lt;/span>).(&lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">Input&lt;/span>)
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">filter&lt;/span> = &lt;span style="color:#a6e22e">factoryOf&lt;/span>(&lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">FilterType&lt;/span>).&lt;span style="color:#a6e22e">Create&lt;/span>(&lt;span style="color:#a6e22e">conf&lt;/span>.&lt;span style="color:#a6e22e">Filter&lt;/span>).(&lt;span style="color:#a6e22e">pulgin&lt;/span>.&lt;span style="color:#a6e22e">Filter&lt;/span>)
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">output&lt;/span> = &lt;span style="color:#a6e22e">factoryOf&lt;/span>(&lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">OutputType&lt;/span>).&lt;span style="color:#a6e22e">Create&lt;/span>(&lt;span style="color:#a6e22e">conf&lt;/span>.&lt;span style="color:#a6e22e">Output&lt;/span>).(&lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">Output&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>
)
&lt;span style="color:#75715e">// 初始化插件工厂对象
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span>() {
&lt;span style="color:#a6e22e">pluginFactories&lt;/span>[&lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">InputType&lt;/span>] = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">InputFactory&lt;/span>{}
&lt;span style="color:#a6e22e">pluginFactories&lt;/span>[&lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">FilterType&lt;/span>] = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">FilterFactory&lt;/span>{}
&lt;span style="color:#a6e22e">pluginFactories&lt;/span>[&lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">OutputType&lt;/span>] = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">OutputFactory&lt;/span>{}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TestPipeline&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;span style="color:#75715e">// 其中pipeline.DefaultConfig()的配置内容见[抽象工厂模式示例图]
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 消息处理流程为 HelloInput -&amp;gt; UpperFilter -&amp;gt; ConsoleOutput
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pipeline&lt;/span>.&lt;span style="color:#a6e22e">Of&lt;/span>(&lt;span style="color:#a6e22e">pipeline&lt;/span>.&lt;span style="color:#a6e22e">Deafult&lt;/span>.&lt;span style="color:#a6e22e">Config&lt;/span>())
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Exec&lt;/span>()
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="原型模式prototype-pattern">原型模式(Prototype Pattern)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">prototype&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#75715e">// 原型复制抽象接口
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Prototype&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">clone&lt;/span>() &lt;span style="color:#a6e22e">Prototype&lt;/span>
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Message&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Header&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Header&lt;/span>
&lt;span style="color:#a6e22e">Body&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Body&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Message&lt;/span>) &lt;span style="color:#a6e22e">clone&lt;/span>() &lt;span style="color:#a6e22e">Prototype&lt;/span> {
&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">m&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">msg&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TestPrototype&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;span style="color:#a6e22e">message&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Builder&lt;/span>().
&lt;span style="color:#a6e22e">WithSrcAddr&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;192.168.0.1&amp;#34;&lt;/span>).
&lt;span style="color:#a6e22e">WithSrcPort&lt;/span>(&lt;span style="color:#ae81ff">1234&lt;/span>).
&lt;span style="color:#a6e22e">WithDestAddr&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;192.168.0.2&amp;#34;&lt;/span>).
&lt;span style="color:#a6e22e">WithDestPort&lt;/span>(&lt;span style="color:#ae81ff">8080&lt;/span>).
&lt;span style="color:#a6e22e">WithHeaderItem&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;contents&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;application/json&amp;#34;&lt;/span>).
&lt;span style="color:#a6e22e">WithBodyItem&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;record1&amp;#34;&lt;/span>).
&lt;span style="color:#a6e22e">WithBodyItem&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;record2&amp;#34;&lt;/span>).
&lt;span style="color:#a6e22e">Build&lt;/span>()
&lt;span style="color:#75715e">// 复制一份消息
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">newMessage&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#a6e22e">Clone&lt;/span>().(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Message&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">newMessage&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">SrcAddr&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">SrcAddr&lt;/span> {
&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Clone Message failed.&amp;#34;&lt;/span>)
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">newMessage&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>.&lt;span style="color:#a6e22e">Items&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>.&lt;span style="color:#a6e22e">Items&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>] {
&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Clone Message failed.&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="结构型模式structural-pattern">结构型模式(Structural Pattern)&lt;/h1>
&lt;h3 id="组合模式composite-pattern">组合模式(Composite Pattern)&lt;/h3>
&lt;p>Go实现组合模式的方式有两种&lt;/p>
&lt;p>直接组合(Direct Composition)&lt;/p>
&lt;p>嵌入组合(Embedding Composition)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Message&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Header&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Header&lt;/span>
&lt;span style="color:#a6e22e">Body&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Body&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">plugin&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#75715e">// 插件运行状态
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Status&lt;/span> &lt;span style="color:#66d9ef">uint8&lt;/span>
&lt;span style="color:#66d9ef">const&lt;/span> (
&lt;span style="color:#a6e22e">Stopped&lt;/span> &lt;span style="color:#a6e22e">Status&lt;/span> = &lt;span style="color:#66d9ef">iota&lt;/span>
&lt;span style="color:#a6e22e">Started&lt;/span>
)
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Plugin&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#75715e">// 启动插件
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Start&lt;/span>()
&lt;span style="color:#75715e">// 停止插件
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Stop&lt;/span>()
&lt;span style="color:#75715e">// 返回插件当前的运行状态
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Status&lt;/span>() &lt;span style="color:#a6e22e">Status&lt;/span>
}
&lt;span style="color:#75715e">// 这里使用Message结构体替代了原来的string,使语义更清晰
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Input&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Plugin&lt;/span>
&lt;span style="color:#a6e22e">Receive&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Message&lt;/span>
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Filter&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Plugin&lt;/span>
&lt;span style="color:#a6e22e">Process&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Message&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Message&lt;/span>
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Output&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Plugin&lt;/span>
&lt;span style="color:#a6e22e">Send&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Message&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">pipeline&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#75715e">// 一个Pipeline由input filter output三个Plugin组成
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Pipeline&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">status&lt;/span> &lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>
&lt;span style="color:#a6e22e">input&lt;/span> &lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">Input&lt;/span>
&lt;span style="color:#a6e22e">filter&lt;/span> &lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">Filter&lt;/span>
&lt;span style="color:#a6e22e">output&lt;/span> &lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">Output&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Pipeline&lt;/span>) &lt;span style="color:#a6e22e">Exec&lt;/span>() {
&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">input&lt;/span>.&lt;span style="color:#a6e22e">Receive&lt;/span>()
&lt;span style="color:#a6e22e">msg&lt;/span> = &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">filter&lt;/span>.&lt;span style="color:#a6e22e">Process&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span>)
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">output&lt;/span>.&lt;span style="color:#a6e22e">Send&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span>)
}
&lt;span style="color:#75715e">// 启动的顺序 output -&amp;gt; filter -&amp;gt; input
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Pipeline&lt;/span>) &lt;span style="color:#a6e22e">Start&lt;/span>() {
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">output&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>()
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">filter&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>()
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">input&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>()
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span> = &lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">Started&lt;/span>
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello input plugin started.&amp;#34;&lt;/span>)
}
&lt;span style="color:#75715e">// 停止的顺序 input -&amp;gt; filter -&amp;gt; output
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Pipeline&lt;/span>) &lt;span style="color:#a6e22e">Stop&lt;/span>() {
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">input&lt;/span>.&lt;span style="color:#a6e22e">Stop&lt;/span>()
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">filter&lt;/span>.&lt;span style="color:#a6e22e">Stop&lt;/span>()
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">output&lt;/span>.&lt;span style="color:#a6e22e">Stop&lt;/span>()
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span> = &lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">Stopped&lt;/span>
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello input plugin stopped.&amp;#34;&lt;/span>)
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Pipeline&lt;/span>) &lt;span style="color:#a6e22e">Status&lt;/span>() &lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>一个&lt;code>Pipeline&lt;/code>由&lt;code>Input&lt;/code>、&lt;code>Filter&lt;/code>、&lt;code>Output&lt;/code>三类插件组成，形成了“部分-整体”的关系，而且它们都实现了&lt;code>Plugin&lt;/code>接口，这就是一个典型的组合模式的实现。Client无需显式地启动和停止&lt;code>Input&lt;/code>、&lt;code>Filter&lt;/code>和&lt;code>Output&lt;/code>插件，在调用&lt;code>Pipeline&lt;/code>对象的&lt;code>Start&lt;/code>和&lt;code>Stop&lt;/code>方法时，&lt;code>Pipeline&lt;/code>就已经帮你按顺序完成对应插件的启动和停止。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">plugin&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">HelloInput&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">status&lt;/span> &lt;span style="color:#a6e22e">Status&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">h&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">HelloInput&lt;/span>) &lt;span style="color:#a6e22e">Receive&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Message&lt;/span> {
&lt;span style="color:#75715e">// 如果插件未启动,则返回nil
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">Started&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello input plugin is not running, input nothing.&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Builder&lt;/span>().
&lt;span style="color:#a6e22e">WithHeaderItem&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;content&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span>).
&lt;span style="color:#a6e22e">WithBodyItem&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello World&amp;#34;&lt;/span>).
&lt;span style="color:#a6e22e">Build&lt;/span>()
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">h&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">HelloInput&lt;/span>) &lt;span style="color:#a6e22e">start&lt;/span>() {
&lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span> = &lt;span style="color:#a6e22e">Started&lt;/span>
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello input plugin started.&amp;#34;&lt;/span>)
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">h&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">HelloInput&lt;/span>) &lt;span style="color:#a6e22e">Stop&lt;/span>() {
&lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span> = &lt;span style="color:#a6e22e">Stopped&lt;/span>
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello input plugin stopped.&amp;#34;&lt;/span>)
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">h&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">HelloInput&lt;/span>) &lt;span style="color:#a6e22e">Status&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">UpperFilter&lt;/span>) &lt;span style="color:#a6e22e">Process&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Message&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Message&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">u&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">Started&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Upper filter plugin is not running, filter nothing.&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">msg&lt;/span>
}
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>.&lt;span style="color:#a6e22e">Items&lt;/span> {
&lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>.&lt;span style="color:#a6e22e">Items&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] = &lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">ToUpper&lt;/span>(&lt;span style="color:#a6e22e">val&lt;/span>)
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">msg&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">UpperFilter&lt;/span>) &lt;span style="color:#a6e22e">Start&lt;/span>() {
&lt;span style="color:#a6e22e">u&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span> = &lt;span style="color:#a6e22e">Started&lt;/span>
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Upper filter plugin started.&amp;#34;&lt;/span>)
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">UpperFilter&lt;/span>) &lt;span style="color:#a6e22e">Stop&lt;/span>() {
&lt;span style="color:#a6e22e">u&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span> = &lt;span style="color:#a6e22e">Stopped&lt;/span>
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Upper filter plugin stopped.&amp;#34;&lt;/span>)
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">UpperFilter&lt;/span>) &lt;span style="color:#a6e22e">Status&lt;/span>() &lt;span style="color:#a6e22e">Status&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">u&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span>
}
&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">plugin&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ConsoleOutput&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">status&lt;/span> &lt;span style="color:#a6e22e">Status&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ConsoleOutput&lt;/span>) &lt;span style="color:#a6e22e">Send&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Message&lt;/span>) {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">Started&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Console output is not running, output nothing.&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Output:\n\tHeader:%+v, Body:%+v\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Items&lt;/span>, &lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>.&lt;span style="color:#a6e22e">Items&lt;/span>)
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ConsoleOutput&lt;/span>) &lt;span style="color:#a6e22e">Start&lt;/span>() {
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span> = &lt;span style="color:#a6e22e">Started&lt;/span>
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Console output plugin started.&amp;#34;&lt;/span>)
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ConsoleOutput&lt;/span>) &lt;span style="color:#a6e22e">Stop&lt;/span>() {
&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span> = &lt;span style="color:#a6e22e">Stopped&lt;/span>
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Console output plugin stopped.&amp;#34;&lt;/span>)
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ConsoleOutput&lt;/span>) &lt;span style="color:#a6e22e">Status&lt;/span>() &lt;span style="color:#a6e22e">Status&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TestPipeline&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pipeline&lt;/span>.&lt;span style="color:#a6e22e">Of&lt;/span>(&lt;span style="color:#a6e22e">pipeline&lt;/span>.&lt;span style="color:#a6e22e">DefaultConfig&lt;/span>())
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>()
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Exec&lt;/span>()
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Stop&lt;/span>()
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>组合模式的另一种实现,嵌入组合(Embedding Composition),是利用了Go的匿名成员特性,本质上跟直接组合是一致的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Message&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Header&lt;/span>
&lt;span style="color:#a6e22e">Body&lt;/span>
}
&lt;span style="color:#75715e">// 使用时,Message可以引用Header和Body的成员属性
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Message&lt;/span>{}
&lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">SrcAddr&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;192.168.0.1&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="适配器模式adapter-pattern">适配器模式(Adapter Pattern)&lt;/h3>
&lt;p>适配器模式是最常用的结构型模式之一,它让原本因为接口不匹配而无法一起工作的两个对象能够一起工作.适配器模式所做的就是将一个接口Adaptee,通过适配器Adapter转换成Client所期望的另一个接口Target来使用,实现原理也很简单,就是Adapter通过实现Target接口,并在对应的方法中调用Adaptee的接口实现&lt;/p>
&lt;p>一个典型的应用场景是,系统中一个老的接口已经过时即将废弃,但因为历史包袱没法立即将老接口全部替换为新接口.可以新增一个适配器,将老的接口适配成新的接口来使用.适配器模式很好的践行了面向对象设计里的开闭原则(open/closed principle),新增一个接口时也无需修改老接口,只需多加一个适配器即可.&lt;/p>
&lt;p>假设需要给系统新增从kafka 消息队列中接收数据的功能,其中Kafka消费者的接口如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">kafka&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Records&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Items&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Consumer&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Poll&lt;/span>() &lt;span style="color:#a6e22e">Records&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于当前Pipeline设计时通过plugin.Input接口来进行数据接收,因此kafka.Consumer并不能直接集成到系统中.&lt;/p>
&lt;p>所以需要使用适配器模式&lt;/p>
&lt;p>为了能让Pipeline能够使用kafka.Consumer接口,我们需要定义一个适配器:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">plugin&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">KafkaInput&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">status&lt;/span> &lt;span style="color:#a6e22e">Status&lt;/span>
&lt;span style="color:#a6e22e">consumer&lt;/span> &lt;span style="color:#a6e22e">kafka&lt;/span>.&lt;span style="color:#a6e22e">Consumer&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">k&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">KafkaInput&lt;/span>) &lt;span style="color:#a6e22e">Receive&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Message&lt;/span> {
&lt;span style="color:#a6e22e">records&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">k&lt;/span>.&lt;span style="color:#a6e22e">consumer&lt;/span>.&lt;span style="color:#a6e22e">Poll&lt;/span>()
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">k&lt;/span>.&lt;span style="color:#a6e22e">status&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">Started&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Kafka input plugin is not running, input nothing.&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Builder&lt;/span>().
&lt;span style="color:#a6e22e">WithHeaderItem&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;content&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;kafka&amp;#34;&lt;/span>).
&lt;span style="color:#a6e22e">WithBodyItem&lt;/span>(&lt;span style="color:#a6e22e">records&lt;/span>.&lt;span style="color:#a6e22e">Item&lt;/span>).
&lt;span style="color:#a6e22e">Build&lt;/span>()
}
&lt;span style="color:#75715e">// 在输入插件映射关系中加入kafka,用于通过反射创建input对象
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span>() {
&lt;span style="color:#a6e22e">inputNames&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>] = &lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">TypeOf&lt;/span>(&lt;span style="color:#a6e22e">HelloInput&lt;/span>{})
&lt;span style="color:#a6e22e">inputNames&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;kafka&amp;#34;&lt;/span>] = &lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">TypeOf&lt;/span>(&lt;span style="color:#a6e22e">KafkaInput&lt;/span>{})
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为Go语言没有构造函数,如果按照抽象工厂模式来创建KafkaInput,那么得到的实例中的consumer成员因为没有被初始化而会是nil.因此,需要给Plugin接口新增一个Init方法,用户定义插件的一些初始化操作,并在工厂返回实例前调用.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">plugin&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Plugin&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Start&lt;/span>()
&lt;span style="color:#a6e22e">Stop&lt;/span>()
&lt;span style="color:#a6e22e">Status&lt;/span>() &lt;span style="color:#a6e22e">Status&lt;/span>
&lt;span style="color:#75715e">// 新增初始化方法,在插件Init函数,完成相关初始化方法
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Init&lt;/span>()
}
&lt;span style="color:#75715e">// 修改后的插件工厂实现如下
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">InputFactory&lt;/span>) &lt;span style="color:#a6e22e">Create&lt;/span>(&lt;span style="color:#a6e22e">conf&lt;/span> &lt;span style="color:#a6e22e">Config&lt;/span>) &lt;span style="color:#a6e22e">Plugin&lt;/span> {
&lt;span style="color:#a6e22e">t&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">inputNames&lt;/span>[&lt;span style="color:#a6e22e">conf&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>]
&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">reflect&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>).&lt;span style="color:#a6e22e">Interface&lt;/span>().(&lt;span style="color:#a6e22e">Plugin&lt;/span>)
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Init&lt;/span>()
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>
}
&lt;span style="color:#75715e">// KafkaInput的Init函数实现
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">k&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">KafkaInput&lt;/span>) &lt;span style="color:#a6e22e">Init&lt;/span>() {
&lt;span style="color:#a6e22e">k&lt;/span>.&lt;span style="color:#a6e22e">consumer&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">kafka&lt;/span>.&lt;span style="color:#a6e22e">MockConsumer&lt;/span>{}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上述代码中的kafka.MockConsumer为我们模拟Kafka消费者的一个实现,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">kafka&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">MockConsumer&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">MockConsumer&lt;/span>) &lt;span style="color:#a6e22e">Poll&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Records&lt;/span> {
&lt;span style="color:#a6e22e">records&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Records&lt;/span>{}
&lt;span style="color:#a6e22e">records&lt;/span>.&lt;span style="color:#a6e22e">Items&lt;/span> = append(&lt;span style="color:#a6e22e">records&lt;/span>.&lt;span style="color:#a6e22e">Items&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;i am mock consumer.&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">records&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TestKafkaInputPipeline&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;span style="color:#a6e22e">config&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pipeline&lt;/span>.&lt;span style="color:#a6e22e">Config&lt;/span>{
&lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pipeline2&amp;#34;&lt;/span>,
&lt;span style="color:#a6e22e">Input&lt;/span>: &lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">Config&lt;/span>{
&lt;span style="color:#a6e22e">PluginType&lt;/span>: &lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">InputType&lt;/span>,
&lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;kafka&amp;#34;&lt;/span>,
},
&lt;span style="color:#a6e22e">Filter&lt;/span>: &lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">Config&lt;/span>{
&lt;span style="color:#a6e22e">PluginType&lt;/span>: &lt;span style="color:#a6e22e">plugiin&lt;/span>.&lt;span style="color:#a6e22e">FilterType&lt;/span>,
&lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;upper&amp;#34;&lt;/span>,
},
&lt;span style="color:#a6e22e">Output&lt;/span>: &lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">Config&lt;/span>{
&lt;span style="color:#a6e22e">PluginType&lt;/span>: &lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">OutputType&lt;/span>,
&lt;span style="color:#a6e22e">Name&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;console&amp;#34;&lt;/span>,
},
}
&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pipeline&lt;/span>.&lt;span style="color:#a6e22e">Of&lt;/span>(&lt;span style="color:#a6e22e">config&lt;/span>)
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>()
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Exec&lt;/span>()
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Stop&lt;/span>()
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="桥接模式bridge-pattern">桥接模式(Bridge Pattern)&lt;/h3>
&lt;p>&lt;img src="https://tcs.teambition.net/storage/312e6caaa50934bbfe2d273c2a6bc5be4942?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjU5Mzc3MGZmODM5NjMyMDAyZTAzNThmMSIsIl9hcHBJZCI6IjU5Mzc3MGZmODM5NjMyMDAyZTAzNThmMSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTY3NzgyNTE0NCwiaWF0IjoxNjc3MjIwMzQ0LCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzMxMmU2Y2FhYTUwOTM0YmJmZTJkMjczYzJhNmJjNWJlNDk0MiJ9.smGJmZZGv_HRw2QeywW6rpZCvL5nszKjkFvhjHM-M80&amp;amp;download=image.png" alt="" title="">&lt;/p>
&lt;p>桥接模式主要用于将抽象部分和实现部分进行解耦,使得它们能够各自往独立的方向变化.&lt;/p>
&lt;p>&lt;img src="https://tcs.teambition.net/storage/312e7779775d739bfcb2507aff8539a09920?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjU5Mzc3MGZmODM5NjMyMDAyZTAzNThmMSIsIl9hcHBJZCI6IjU5Mzc3MGZmODM5NjMyMDAyZTAzNThmMSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTY3NzgyNTE0NCwiaWF0IjoxNjc3MjIwMzQ0LCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzMxMmU3Nzc5Nzc1ZDczOWJmY2IyNTA3YWZmODUzOWEwOTkyMCJ9.JYF6QyIagvBAxw4E3Y1apqCeglSjUK85gmycYHO1aXE&amp;amp;download=image.png" alt="" title="">&lt;/p>
&lt;p>这个例子中,我们通过将形状和颜色抽象为一个接口,使产品不再依赖于具体的形状和颜色细节,从而达到了解耦的目的.桥接模式本质上就是面向接口编程,可以给系统带来很好的灵活性和可扩展性.如果一个对象存在多个变化的方向,而且每个变化方向都需要扩展,那么使用桥街模式进行设计比较合适.&lt;/p>
&lt;p>回到消息处理系统的例子,一个Pipeline对象主要由Input、Filter、Output三类插件组成(3个特征),因为是插件化的系统,不可避免的就要求支持多种Input、Filter、Output的实现,并能够灵活组合(有多个变化的方向).显然,Pipeline就非常适合使用桥街模式进行设计,实际上我们也这么做了.我们将Input、Filter、Output分别设计成一个抽象的接口,它们按照各自的方向去扩展.Pipeline只依赖的这3个抽象接口,并不感知具体实现的细节.&lt;/p>
&lt;p>&lt;img src="https://tcs.teambition.net/storage/312e5f292fba5d2a22c27489b1801ce8cd44?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjU5Mzc3MGZmODM5NjMyMDAyZTAzNThmMSIsIl9hcHBJZCI6IjU5Mzc3MGZmODM5NjMyMDAyZTAzNThmMSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTY3NzgyNTE0NCwiaWF0IjoxNjc3MjIwMzQ0LCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzMxMmU1ZjI5MmZiYTVkMmEyMmMyNzQ4OWIxODAxY2U4Y2Q0NCJ9.cQmR2A369OpQkwOoL_6-LQpwmaCHE9nJTiAmzu6AO8Q&amp;amp;download=image.png" alt="" title="">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">plugin&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Input&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Plugin&lt;/span>
&lt;span style="color:#a6e22e">Receive&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Message&lt;/span>
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Filter&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Plugin&lt;/span>
&lt;span style="color:#a6e22e">Process&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Message&lt;/span>) &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Message&lt;/span>
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Output&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#a6e22e">Plugin&lt;/span>
&lt;span style="color:#a6e22e">Send&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">msg&lt;/span>.&lt;span style="color:#a6e22e">Message&lt;/span>)
}
&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">pipeline&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#75715e">// 一个Pipeline由input、filter、output三个Plugin组成
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Pipeline&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">status&lt;/span> &lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">Status&lt;/span>
&lt;span style="color:#a6e22e">input&lt;/span> &lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">Input&lt;/span>
&lt;span style="color:#a6e22e">filter&lt;/span> &lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">Filter&lt;/span>
&lt;span style="color:#a6e22e">output&lt;/span> &lt;span style="color:#a6e22e">plugin&lt;/span>.&lt;span style="color:#a6e22e">Output&lt;/span>
}
&lt;span style="color:#75715e">// 通过抽象接口来使用,看不到底层的实现细节
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Pipeline&lt;/span>) &lt;span style="color:#a6e22e">Exec&lt;/span>() {
&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">input&lt;/span>.&lt;span style="color:#a6e22e">Receive&lt;/span>()
&lt;span style="color:#a6e22e">msg&lt;/span> = &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">filter&lt;/span>.&lt;span style="color:#a6e22e">Process&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span>)
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">output&lt;/span>.&lt;span style="color:#a6e22e">Send&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TestPipeline&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">T&lt;/span>) {
&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pipeline&lt;/span>.&lt;span style="color:#a6e22e">Of&lt;/span>(&lt;span style="color:#a6e22e">pipeline&lt;/span>.&lt;span style="color:#a6e22e">DefaultConfig&lt;/span>())
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>()
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Exec&lt;/span>()
&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Stop&lt;/span>()
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>本文主要介绍了结构型模式中的组合模式、适配器模式和桥接模式。&lt;strong>组合模式&lt;/strong>主要解决代码复用的问题，相比于继承关系，组合模式可以避免继承层次过深导致的代码复杂问题，因此面向对象设计领域流传着&lt;strong>组合优于继承&lt;/strong>的原则，而Go语言的设计也很好实践了该原则；&lt;strong>适配器模式&lt;/strong>可以看作是两个不兼容接口之间的桥梁，可以将一个接口转换成client所希望的另外一个接口，解决了模块之间因为接口不兼容而无法一起工作的问题；&lt;strong>桥接模式&lt;/strong>将模块的抽象部分和实现部分进行分离，让它们能够往各自的方向扩展，从而达到解耦的目的。&lt;/p>
&lt;h3 id="代理模式proxy-pattern">代理模式(Proxy Pattern)&lt;/h3>
&lt;p>&lt;img src="https://tcs.teambition.net/storage/312e70565f8b57a77be711d582d86bc7de93?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjU5Mzc3MGZmODM5NjMyMDAyZTAzNThmMSIsIl9hcHBJZCI6IjU5Mzc3MGZmODM5NjMyMDAyZTAzNThmMSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTY3NzgyNTE0NCwiaWF0IjoxNjc3MjIwMzQ0LCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzMxMmU3MDU2NWY4YjU3YTc3YmU3MTFkNTgyZDg2YmM3ZGU5MyJ9.eFrV730KZWTn3ck9inoCnSlvJeJ5miaE1yezLMXyiWI&amp;amp;download=image.png" alt="" title="">&lt;/p>
&lt;p>代理模式为一个对象提供一种代理以控制对该对象的访问&lt;/p>
&lt;p>// 当Client不方便直接访问一个对象时,提供一个代理对象控制该对象的访问&lt;/p>
&lt;p>代理模式分以下几种:&lt;/p>
&lt;p>&lt;strong>远程代理(remote proxy)&lt;/strong>: 远程代理适用于提供服务的对象处在远程的机器上,通过普通的函数调用无法使用服务,需要经过远程代理来完成.因此并不能直接访问本体对象,所有远程代理对象通常不会直接持有本体对象的引用,而是持有远端机器的地址,通过网络协议去访问本体对象&lt;/p>
&lt;p>&lt;strong>虚拟代理(virtual proxy)&lt;/strong>:对一些重量级的服务对象,如果一直持有该对象实例回非常消耗系统资源,这时可以通过虚拟代理来对该对象进行延迟初始化.&lt;/p>
&lt;p>&lt;strong>保护代理(protection proxy)&lt;/strong>:保护代理用于控制对本体对象的访问,常用于需要给Client的访问加上权限验证的场景.&lt;/p>
&lt;p>&lt;strong>缓存代理(cache proxy)&lt;/strong>:缓存代理主要在Client与本体对象之间加上一层缓存,用于加速本体对象的访问,常见于连接数据库的场景.&lt;/p>
&lt;p>&lt;strong>智能引用(smart reference)&lt;/strong>:智能引用为本体对象的访问提供了额外的动作,常见的实现为C++中智能指针,为对象的访问提供了计数功能,当访问对象的计数为0时销毁该对象.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#75715e">// Key-Value数据库接口
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">KvDb&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;span style="color:#75715e">// 存储数据
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 其中reply为操作结果,存储成功为true, 否则为false
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 当连接数据库失败时返回error,成功则返回nil
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Save&lt;/span>(&lt;span style="color:#a6e22e">record&lt;/span> &lt;span style="color:#a6e22e">Record&lt;/span>, &lt;span style="color:#a6e22e">reply&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">bool&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;span style="color:#75715e">// 根据key获取value,其中value通过函数参数中指针类型返回
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 当连接数据库失败时返回error,成功则返回nil
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Record&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">Value&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>数据库是一个Key-Value数据库,使用map存储数据,下面为数据库的服务端实现,&lt;code>db.Server&lt;/code>实现了db.KvDb接口:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#75715e">// 数据库服务端实现
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Server&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#75715e">// 采用map存储key-value数据
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Server&lt;/span>) &lt;span style="color:#a6e22e">Save&lt;/span>(&lt;span style="color:#a6e22e">record&lt;/span> &lt;span style="color:#a6e22e">Record&lt;/span>, &lt;span style="color:#a6e22e">reply&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">bool&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">data&lt;/span> = make(&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>)
}
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">data&lt;/span>[&lt;span style="color:#a6e22e">record&lt;/span>.&lt;span style="color:#a6e22e">Key&lt;/span>] = &lt;span style="color:#a6e22e">record&lt;/span>.&lt;span style="color:#a6e22e">Value&lt;/span>
&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">reply&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Server&lt;/span>) &lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">reply&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;span style="color:#a6e22e">val&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">data&lt;/span>[&lt;span style="color:#a6e22e">key&lt;/span>]
&lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">reply&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Db has no key &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">key&lt;/span>)
}
&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">reply&lt;/span> = &lt;span style="color:#a6e22e">val&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>消息处理系统和数据库并不在同一台机器上,因此消息处理系统不能直接调用&lt;code>db.Server&lt;/code>的方法进行数据存储,需要使用远程代理的方式&lt;/p>
&lt;p>在远程代理中,最常见的一种实现是远程过程调用(Remote Procedure Call)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#75715e">// 启动数据库,对外提供RPC接口进行数据库的访问
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Start&lt;/span>() {
&lt;span style="color:#a6e22e">rpcServer&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rpc&lt;/span>.&lt;span style="color:#a6e22e">NewServer&lt;/span>()
&lt;span style="color:#a6e22e">server&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Server&lt;/span>{&lt;span style="color:#a6e22e">data&lt;/span>: &lt;span style="color:#a6e22e">make&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">string&lt;/span>}
&lt;span style="color:#75715e">// 将数据库接口注册到RPC服务器上
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rpc&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span>.&lt;span style="color:#a6e22e">Register&lt;/span>(&lt;span style="color:#a6e22e">server&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Register Server to rpc failed, error: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#a6e22e">l&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">net&lt;/span>.&lt;span style="color:#a6e22e">Listen&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;tcp&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;127.0.0.1:1234&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Listen tcp failed, error: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span>
}
&lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">rpcServer&lt;/span>.&lt;span style="color:#a6e22e">Accept&lt;/span>(&lt;span style="color:#a6e22e">l&lt;/span>)
&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Sleep&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>)
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;RPC server start success.&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面已经为数据库提供了对外访问的方式.现在,需要一个远程代理来连接数据库服务端,并进行相关的数据库的操作.对消息处理系统而言,它不需要,也不应该知道远程代理与数据库服务端交互的底层细节,这样可以减轻系统之间的耦合.因此,远程代理需要实现&lt;code>db.KvDb&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">db&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#75715e">// 数据库服务端远程代理,实现db.KvDb接口
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Client&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#75715e">// RPC客户端
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">cli&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">rpc&lt;/span>.&lt;span style="color:#a6e22e">Client&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Client&lt;/span>) &lt;span style="color:#a6e22e">Save&lt;/span>(&lt;span style="color:#a6e22e">record&lt;/span> &lt;span style="color:#a6e22e">Record&lt;/span>, &lt;span style="color:#a6e22e">Reply&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">bool&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">ret&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;span style="color:#75715e">// 通过RPC调用服务端的接口
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">cli&lt;/span>.&lt;span style="color:#a6e22e">Call&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Server.Save&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">record&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">ret&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Call db Server.Save rpc failed, error: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">reply&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
}
&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">reply&lt;/span> = &lt;span style="color:#a6e22e">ret&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Client&lt;/span>) &lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">reply&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">ret&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#75715e">// 通过RPC调用服务端的接口
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">cli&lt;/span>.&lt;span style="color:#a6e22e">Call&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Server.Get&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">record&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">ret&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Call db Server.Get rpc failed, error: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">reply&lt;/span> = &lt;span style="color:#66d9ef">false&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
}
&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">reply&lt;/span> = &lt;span style="color:#a6e22e">ret&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#75715e">// 工厂方法,返回远程代理实例
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">CreateClient&lt;/span>() &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Client&lt;/span> {
&lt;span style="color:#a6e22e">rpcCli&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rpc&lt;/span>.&lt;span style="color:#a6e22e">Dial&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;tcp&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;127.0.0.1:1234&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Create rpc client failed, error: %v.&amp;#34;&lt;/span>,&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Client&lt;/span>{&lt;span style="color:#a6e22e">cli&lt;/span>: &lt;span style="color:#a6e22e">rpcCli&lt;/span>}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>作为远程代理的db.Client并没有直接持有db.Server的引用,而是持有了它的&lt;code>ip:port&lt;/code>&lt;/p>
&lt;p>通过RPC客户端调用了它的方法&lt;/p>
&lt;h3 id="装饰模式decorator-pattern">装饰模式(Decorator Pattern)&lt;/h3>
&lt;p>&lt;img src="https://tcs.teambition.net/storage/312e9309f45180e9077336f18b2fe3f4bb44?Signature=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJBcHBJRCI6IjU5Mzc3MGZmODM5NjMyMDAyZTAzNThmMSIsIl9hcHBJZCI6IjU5Mzc3MGZmODM5NjMyMDAyZTAzNThmMSIsIl9vcmdhbml6YXRpb25JZCI6IiIsImV4cCI6MTY3NzgyNTE0NCwiaWF0IjoxNjc3MjIwMzQ0LCJyZXNvdXJjZSI6Ii9zdG9yYWdlLzMxMmU5MzA5ZjQ1MTgwZTkwNzczMzZmMThiMmZlM2Y0YmI0NCJ9.Qv59p6umMZ66pWRG87aeRFDyybLoIrJHGLEpQS7ASIs&amp;amp;download=image.png" alt="" title="">&lt;/p>
&lt;p>装饰模式使用组合而非继承的方式,能够动态的为本体对象叠加新的行为&lt;/p>
&lt;p>装饰模式最经典的应用当属Java的I/O流体系,通过装饰模式,使用者可以动态地为原始的输入输出流添加功能,比如按照字符串输入输出,添加缓存等&lt;/p>
&lt;p>从结构上看,装饰模式和代理模式具有很高的相似性,但是两种所强调的点不一样.装饰模式强调的是为本体对象添加新的功能,代理模式强调的是对本体对象的访问控制&lt;/p>
&lt;p>行为型模式(Behavioral Pattern)&lt;/p></content></item></channel></rss>