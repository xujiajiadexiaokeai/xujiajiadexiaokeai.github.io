<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Test on xujiajiadexiaokeai</title><link>https://xujiajiadexiaokeai.github.io/tags/test/</link><description>Recent content in Test on xujiajiadexiaokeai</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© 2021-2022 xujiajiadexiaokeai</copyright><lastBuildDate>Fri, 25 Mar 2022 20:32:48 +0800</lastBuildDate><atom:link href="https://xujiajiadexiaokeai.github.io/tags/test/index.xml" rel="self" type="application/rss+xml"/><item><title>AVLTree</title><link>https://xujiajiadexiaokeai.github.io/2022-03-25/avl-tree/</link><pubDate>Fri, 25 Mar 2022 20:32:48 +0800</pubDate><guid>https://xujiajiadexiaokeai.github.io/2022-03-25/avl-tree/</guid><description>特征 · 左右子树的高度差小于等于1
· 每一个子树均为平衡二叉树
原理 监督机制 监督指标: 平衡因子(Balance Factor): 某个节点的左子树高度-右子树高度的差值
所以AVL树是一种所有节点的平衡因子的绝对值都不超过1的二叉树
高度 type Node struct { Data int Height int left *Node right *Node } 计算节点高度
func (n *Node) TreeHeight() int { if n == nil { return 0 } else { return max(treeHeight(n.left), treeHeight(n.right)) + 1 } } 在进行如下操作时,需要更新受影响的所有节点的高度
在插入节点时, 沿插入的路径更新节点的高度值
在删除节点时, 沿删除的路径更新节点的高度值
计算平衡因子
func (n *Node) treeBalanceFactor() { if n == nil { return 0 } else { return x.</description></item><item><title>My First Post</title><link>https://xujiajiadexiaokeai.github.io/posts/my-first-post/</link><pubDate>Sat, 12 Feb 2022 13:17:00 +0800</pubDate><guid>https://xujiajiadexiaokeai.github.io/posts/my-first-post/</guid><description>111</description></item></channel></rss>