<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Concurrency on xujiajiadexiaokeai</title><link>https://xujiajiadexiaokeai.github.io/tags/concurrency/</link><description>Recent content in Concurrency on xujiajiadexiaokeai</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© 2021-2022 xujiajiadexiaokeai</copyright><lastBuildDate>Fri, 03 Dec 2021 21:55:30 +0800</lastBuildDate><atom:link href="https://xujiajiadexiaokeai.github.io/tags/concurrency/index.xml" rel="self" type="application/rss+xml"/><item><title>Concurrency Control</title><link>https://xujiajiadexiaokeai.github.io/2021-12-03/concurrency-control/</link><pubDate>Fri, 03 Dec 2021 21:55:30 +0800</pubDate><guid>https://xujiajiadexiaokeai.github.io/2021-12-03/concurrency-control/</guid><description>并发控制机制 Pessimistic Optimistic Multiversion 悲观并发控制-Pessimistic Concurrency Control 在悲观并发控制中,数据库程序对于数据被修改持悲观态度,在数据处理的过程中都会被锁定,以此来解决竞争问题
读写锁 为了最大化数据库事务的并发能力,数据库中的锁被设计为两种模式,分别是共享锁和互斥锁.
当一个事务获得共享锁之后,只可以进行读操作,所以共享锁也叫读锁
当一个事务获得一行数据的互斥锁时,就可以对该行数据进行读和写操作,所以互斥锁也叫写锁
共享锁和互斥锁出了限制事务能够执行的读写操作之外,它们之间还有共享和互斥的关系,也就是多个事务可以同时获得某一行数据的共享锁,但是互斥锁和共享锁和其他的互斥锁并不兼容,我们可以很自然地理解这么设计的原因: 多个事务同时写入同一数据难免会发生诡异的问题
如果当前事务没有办法获取该行数据对应的锁时就会陷入等待的状态,直到其他事务将当前数据对应的锁释放才可以获得锁并执行相应的操作
两阶段锁协议 两阶段锁协议(2PL)是一种能够保证事务可串行化的协议,它将事务的获取锁和释放锁划分成了增长(Growing)和缩减(Shrinking)两个不同的阶段
在增长阶段,一个事务可以获得锁但不能释放锁;在缩减阶段,事务只能释放锁,不能获得锁
变种:
Strict 2PL: 事务持有的互斥锁必须在提交后再释放
Rigorous 2PL: 事务持有的所有锁必须在提交后再释放
问题:
两阶段锁的使用带来了另一个问题-死锁
死锁的处理 解决死锁大体上有两种方法:
一是从源头杜绝死锁的产生和出现
二是允许系统进入死锁的状态,但是在系统出现死锁时能够及时发现并且进行恢复</description><content>&lt;h1 id="并发控制机制">并发控制机制&lt;/h1>
&lt;ul>
&lt;li>Pessimistic&lt;/li>
&lt;li>Optimistic&lt;/li>
&lt;li>Multiversion&lt;/li>
&lt;/ul>
&lt;h2 id="悲观并发控制-pessimistic-concurrency-control">悲观并发控制-Pessimistic Concurrency Control&lt;/h2>
&lt;p>在悲观并发控制中,数据库程序对于数据被修改持悲观态度,在数据处理的过程中都会被锁定,以此来解决竞争问题&lt;/p>
&lt;h3 id="读写锁">读写锁&lt;/h3>
&lt;p>为了最大化数据库事务的并发能力,数据库中的锁被设计为两种模式,分别是共享锁和互斥锁.&lt;/p>
&lt;p>当一个事务获得共享锁之后,只可以进行读操作,所以共享锁也叫读锁&lt;/p>
&lt;p>当一个事务获得一行数据的互斥锁时,就可以对该行数据进行读和写操作,所以互斥锁也叫写锁&lt;/p>
&lt;p>共享锁和互斥锁出了限制事务能够执行的读写操作之外,它们之间还有共享和互斥的关系,也就是多个事务可以同时获得某一行数据的共享锁,但是互斥锁和共享锁和其他的互斥锁并不兼容,我们可以很自然地理解这么设计的原因: 多个事务同时写入同一数据难免会发生诡异的问题&lt;/p>
&lt;p>如果当前事务没有办法获取该行数据对应的锁时就会陷入等待的状态,直到其他事务将当前数据对应的锁释放才可以获得锁并执行相应的操作&lt;/p>
&lt;h3 id="两阶段锁协议">两阶段锁协议&lt;/h3>
&lt;p>两阶段锁协议(2PL)是一种能够保证事务可串行化的协议,它将事务的获取锁和释放锁划分成了增长(Growing)和缩减(Shrinking)两个不同的阶段&lt;/p>
&lt;p>在增长阶段,一个事务可以获得锁但不能释放锁;在缩减阶段,事务只能释放锁,不能获得锁&lt;/p>
&lt;p>变种:&lt;/p>
&lt;p>Strict 2PL: 事务持有的互斥锁必须在提交后再释放&lt;/p>
&lt;p>Rigorous 2PL: 事务持有的所有锁必须在提交后再释放&lt;/p>
&lt;p>问题:&lt;/p>
&lt;p>两阶段锁的使用带来了另一个问题-死锁&lt;/p>
&lt;h3 id="死锁的处理">死锁的处理&lt;/h3>
&lt;p>解决死锁大体上有两种方法:&lt;/p>
&lt;p>一是从源头杜绝死锁的产生和出现&lt;/p>
&lt;p>二是允许系统进入死锁的状态,但是在系统出现死锁时能够及时发现并且进行恢复&lt;/p></content></item></channel></rss>